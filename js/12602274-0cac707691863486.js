"use strict";(self.webpackChunk_N_E=self.webpackChunk_N_E||[]).push([[481],{5791:(e,t,n)=>{n.d(t,{A3:()=>T,PG:()=>K,Tq:()=>Y});var a=n(38233),o=n(29359),i=n(23718),r=n(23570);n(76913);var s=n(12340),u=n(68423),d=n(9669),m=n(74966),c=n(72611),l=n(43598),p=n(57995),y=n(92437),_=n(44134).Buffer,f=(e,t,n)=>new Promise((a,o)=>{var i=e=>{try{s(n.next(e))}catch(e){o(e)}},r=e=>{try{s(n.throw(e))}catch(e){o(e)}},s=e=>e.done?a(e.value):Promise.resolve(e.value).then(i,r);s((n=n.apply(e,t)).next())}),k={address:"cpamdpZCGKUy5JxQXB4dcpGPiikHawvSWAd6mEn1sGG",metadata:{name:"cp_amm",version:"0.1.1",spec:"0.1.0",description:"Created with Anchor"},instructions:[{name:"add_liquidity",discriminator:[181,157,89,67,143,182,52,72],accounts:[{name:"pool",writable:!0,relations:["position"]},{name:"position",writable:!0},{name:"token_a_account",docs:["The user token a account"],writable:!0},{name:"token_b_account",docs:["The user token b account"],writable:!0},{name:"token_a_vault",docs:["The vault token account for input token"],writable:!0,relations:["pool"]},{name:"token_b_vault",docs:["The vault token account for output token"],writable:!0,relations:["pool"]},{name:"token_a_mint",docs:["The mint of token a"],relations:["pool"]},{name:"token_b_mint",docs:["The mint of token b"],relations:["pool"]},{name:"position_nft_account",docs:["The token account for nft"]},{name:"owner",docs:["owner of position"],signer:!0},{name:"token_a_program",docs:["Token a program"]},{name:"token_b_program",docs:["Token b program"]},{name:"event_authority",pda:{seeds:[{kind:"const",value:[95,95,101,118,101,110,116,95,97,117,116,104,111,114,105,116,121]}]}},{name:"program"}],args:[{name:"params",type:{defined:{name:"AddLiquidityParameters"}}}]},{name:"claim_partner_fee",discriminator:[97,206,39,105,94,94,126,148],accounts:[{name:"pool_authority",pda:{seeds:[{kind:"const",value:[112,111,111,108,95,97,117,116,104,111,114,105,116,121]}]}},{name:"pool",writable:!0},{name:"token_a_account",docs:["The treasury token a account"],writable:!0},{name:"token_b_account",docs:["The treasury token b account"],writable:!0},{name:"token_a_vault",docs:["The vault token account for input token"],writable:!0,relations:["pool"]},{name:"token_b_vault",docs:["The vault token account for output token"],writable:!0,relations:["pool"]},{name:"token_a_mint",docs:["The mint of token a"],relations:["pool"]},{name:"token_b_mint",docs:["The mint of token b"],relations:["pool"]},{name:"partner",signer:!0,relations:["pool"]},{name:"token_a_program",docs:["Token a program"]},{name:"token_b_program",docs:["Token b program"]},{name:"event_authority",pda:{seeds:[{kind:"const",value:[95,95,101,118,101,110,116,95,97,117,116,104,111,114,105,116,121]}]}},{name:"program"}],args:[{name:"max_amount_a",type:"u64"},{name:"max_amount_b",type:"u64"}]},{name:"claim_position_fee",discriminator:[180,38,154,17,133,33,162,211],accounts:[{name:"pool_authority",pda:{seeds:[{kind:"const",value:[112,111,111,108,95,97,117,116,104,111,114,105,116,121]}]}},{name:"pool",relations:["position"]},{name:"position",writable:!0},{name:"token_a_account",docs:["The user token a account"],writable:!0},{name:"token_b_account",docs:["The user token b account"],writable:!0},{name:"token_a_vault",docs:["The vault token account for input token"],writable:!0,relations:["pool"]},{name:"token_b_vault",docs:["The vault token account for output token"],writable:!0,relations:["pool"]},{name:"token_a_mint",docs:["The mint of token a"],relations:["pool"]},{name:"token_b_mint",docs:["The mint of token b"],relations:["pool"]},{name:"position_nft_account",docs:["The token account for nft"]},{name:"owner",docs:["owner of position"],signer:!0},{name:"token_a_program",docs:["Token a program"]},{name:"token_b_program",docs:["Token b program"]},{name:"event_authority",pda:{seeds:[{kind:"const",value:[95,95,101,118,101,110,116,95,97,117,116,104,111,114,105,116,121]}]}},{name:"program"}],args:[]},{name:"claim_protocol_fee",discriminator:[165,228,133,48,99,249,255,33],accounts:[{name:"pool_authority",pda:{seeds:[{kind:"const",value:[112,111,111,108,95,97,117,116,104,111,114,105,116,121]}]}},{name:"pool",writable:!0},{name:"token_a_vault",docs:["The vault token account for input token"],writable:!0,relations:["pool"]},{name:"token_b_vault",docs:["The vault token account for output token"],writable:!0,relations:["pool"]},{name:"token_a_mint",docs:["The mint of token a"],relations:["pool"]},{name:"token_b_mint",docs:["The mint of token b"],relations:["pool"]},{name:"token_a_account",docs:["The treasury token a account"],writable:!0,pda:{seeds:[{kind:"const",value:[48,9,89,123,106,114,131,251,50,173,254,250,10,80,160,84,143,100,81,249,134,112,30,213,50,166,239,78,53,175,188,85]},{kind:"account",path:"token_a_program"},{kind:"account",path:"token_a_mint"}],program:{kind:"const",value:[140,151,37,143,78,36,137,241,187,61,16,41,20,142,13,131,11,90,19,153,218,255,16,132,4,142,123,216,219,233,248,89]}}},{name:"token_b_account",docs:["The treasury token b account"],writable:!0,pda:{seeds:[{kind:"const",value:[48,9,89,123,106,114,131,251,50,173,254,250,10,80,160,84,143,100,81,249,134,112,30,213,50,166,239,78,53,175,188,85]},{kind:"account",path:"token_b_program"},{kind:"account",path:"token_b_mint"}],program:{kind:"const",value:[140,151,37,143,78,36,137,241,187,61,16,41,20,142,13,131,11,90,19,153,218,255,16,132,4,142,123,216,219,233,248,89]}}},{name:"claim_fee_operator",docs:["Claim fee operator"]},{name:"operator",docs:["Operator"],signer:!0,relations:["claim_fee_operator"]},{name:"token_a_program",docs:["Token a program"]},{name:"token_b_program",docs:["Token b program"]},{name:"event_authority",pda:{seeds:[{kind:"const",value:[95,95,101,118,101,110,116,95,97,117,116,104,111,114,105,116,121]}]}},{name:"program"}],args:[]},{name:"claim_reward",discriminator:[149,95,181,242,94,90,158,162],accounts:[{name:"pool_authority",pda:{seeds:[{kind:"const",value:[112,111,111,108,95,97,117,116,104,111,114,105,116,121]}]}},{name:"pool",writable:!0,relations:["position"]},{name:"position",writable:!0},{name:"reward_vault",docs:["The vault token account for reward token"],writable:!0},{name:"reward_mint"},{name:"user_token_account",writable:!0},{name:"position_nft_account",docs:["The token account for nft"]},{name:"owner",docs:["owner of position"],signer:!0},{name:"token_program"},{name:"event_authority",pda:{seeds:[{kind:"const",value:[95,95,101,118,101,110,116,95,97,117,116,104,111,114,105,116,121]}]}},{name:"program"}],args:[{name:"reward_index",type:"u8"}]},{name:"close_claim_fee_operator",discriminator:[38,134,82,216,95,124,17,99],accounts:[{name:"claim_fee_operator",writable:!0},{name:"rent_receiver",writable:!0},{name:"admin",signer:!0},{name:"event_authority",pda:{seeds:[{kind:"const",value:[95,95,101,118,101,110,116,95,97,117,116,104,111,114,105,116,121]}]}},{name:"program"}],args:[]},{name:"close_config",discriminator:[145,9,72,157,95,125,61,85],accounts:[{name:"config",writable:!0},{name:"admin",writable:!0,signer:!0},{name:"rent_receiver",writable:!0},{name:"event_authority",pda:{seeds:[{kind:"const",value:[95,95,101,118,101,110,116,95,97,117,116,104,111,114,105,116,121]}]}},{name:"program"}],args:[]},{name:"close_position",discriminator:[123,134,81,0,49,68,98,98],accounts:[{name:"position_nft_mint",docs:["position_nft_mint"],writable:!0},{name:"position_nft_account",docs:["The token account for nft"],writable:!0},{name:"pool",writable:!0,relations:["position"]},{name:"position",writable:!0},{name:"pool_authority",pda:{seeds:[{kind:"const",value:[112,111,111,108,95,97,117,116,104,111,114,105,116,121]}]}},{name:"rent_receiver",writable:!0},{name:"owner",docs:["Owner of position"],signer:!0},{name:"token_program",docs:["Program to create NFT mint/token account and transfer for token22 account"],address:"TokenzQdBNbLqP5VEhdkAS6EPFLC1PHnBqCXEpPxuEb"},{name:"event_authority",pda:{seeds:[{kind:"const",value:[95,95,101,118,101,110,116,95,97,117,116,104,111,114,105,116,121]}]}},{name:"program"}],args:[]},{name:"create_claim_fee_operator",discriminator:[169,62,207,107,58,187,162,109],accounts:[{name:"claim_fee_operator",writable:!0,pda:{seeds:[{kind:"const",value:[99,102,95,111,112,101,114,97,116,111,114]},{kind:"account",path:"operator"}]}},{name:"operator"},{name:"admin",writable:!0,signer:!0},{name:"system_program",address:"11111111111111111111111111111111"},{name:"event_authority",pda:{seeds:[{kind:"const",value:[95,95,101,118,101,110,116,95,97,117,116,104,111,114,105,116,121]}]}},{name:"program"}],args:[]},{name:"create_config",docs:["ADMIN FUNCTIONS /////"],discriminator:[201,207,243,114,75,111,47,189],accounts:[{name:"config",writable:!0,pda:{seeds:[{kind:"const",value:[99,111,110,102,105,103]},{kind:"arg",path:"index"}]}},{name:"admin",writable:!0,signer:!0},{name:"system_program",address:"11111111111111111111111111111111"},{name:"event_authority",pda:{seeds:[{kind:"const",value:[95,95,101,118,101,110,116,95,97,117,116,104,111,114,105,116,121]}]}},{name:"program"}],args:[{name:"index",type:"u64"},{name:"config_parameters",type:{defined:{name:"StaticConfigParameters"}}}]},{name:"create_dynamic_config",discriminator:[81,251,122,78,66,57,208,82],accounts:[{name:"config",writable:!0,pda:{seeds:[{kind:"const",value:[99,111,110,102,105,103]},{kind:"arg",path:"index"}]}},{name:"admin",writable:!0,signer:!0},{name:"system_program",address:"11111111111111111111111111111111"},{name:"event_authority",pda:{seeds:[{kind:"const",value:[95,95,101,118,101,110,116,95,97,117,116,104,111,114,105,116,121]}]}},{name:"program"}],args:[{name:"index",type:"u64"},{name:"config_parameters",type:{defined:{name:"DynamicConfigParameters"}}}]},{name:"create_position",discriminator:[48,215,197,153,96,203,180,133],accounts:[{name:"owner"},{name:"position_nft_mint",docs:["position_nft_mint"],writable:!0,signer:!0},{name:"position_nft_account",docs:["position nft account"],writable:!0,pda:{seeds:[{kind:"const",value:[112,111,115,105,116,105,111,110,95,110,102,116,95,97,99,99,111,117,110,116]},{kind:"account",path:"position_nft_mint"}]}},{name:"pool",writable:!0},{name:"position",writable:!0,pda:{seeds:[{kind:"const",value:[112,111,115,105,116,105,111,110]},{kind:"account",path:"position_nft_mint"}]}},{name:"pool_authority",pda:{seeds:[{kind:"const",value:[112,111,111,108,95,97,117,116,104,111,114,105,116,121]}]}},{name:"payer",docs:["Address paying to create the position. Can be anyone"],writable:!0,signer:!0},{name:"token_program",docs:["Program to create NFT mint/token account and transfer for token22 account"],address:"TokenzQdBNbLqP5VEhdkAS6EPFLC1PHnBqCXEpPxuEb"},{name:"system_program",address:"11111111111111111111111111111111"},{name:"event_authority",pda:{seeds:[{kind:"const",value:[95,95,101,118,101,110,116,95,97,117,116,104,111,114,105,116,121]}]}},{name:"program"}],args:[]},{name:"create_token_badge",discriminator:[88,206,0,91,60,175,151,118],accounts:[{name:"token_badge",writable:!0,pda:{seeds:[{kind:"const",value:[116,111,107,101,110,95,98,97,100,103,101]},{kind:"account",path:"token_mint"}]}},{name:"token_mint"},{name:"admin",writable:!0,signer:!0},{name:"system_program",address:"11111111111111111111111111111111"},{name:"event_authority",pda:{seeds:[{kind:"const",value:[95,95,101,118,101,110,116,95,97,117,116,104,111,114,105,116,121]}]}},{name:"program"}],args:[]},{name:"fund_reward",discriminator:[188,50,249,165,93,151,38,63],accounts:[{name:"pool",writable:!0},{name:"reward_vault",writable:!0},{name:"reward_mint"},{name:"funder_token_account",writable:!0},{name:"funder",signer:!0},{name:"token_program"},{name:"event_authority",pda:{seeds:[{kind:"const",value:[95,95,101,118,101,110,116,95,97,117,116,104,111,114,105,116,121]}]}},{name:"program"}],args:[{name:"reward_index",type:"u8"},{name:"amount",type:"u64"},{name:"carry_forward",type:"bool"}]},{name:"initialize_customizable_pool",discriminator:[20,161,241,24,189,221,180,2],accounts:[{name:"creator"},{name:"position_nft_mint",docs:["position_nft_mint"],writable:!0,signer:!0},{name:"position_nft_account",docs:["position nft account"],writable:!0,pda:{seeds:[{kind:"const",value:[112,111,115,105,116,105,111,110,95,110,102,116,95,97,99,99,111,117,110,116]},{kind:"account",path:"position_nft_mint"}]}},{name:"payer",docs:["Address paying to create the pool. Can be anyone"],writable:!0,signer:!0},{name:"pool_authority",pda:{seeds:[{kind:"const",value:[112,111,111,108,95,97,117,116,104,111,114,105,116,121]}]}},{name:"pool",docs:["Initialize an account to store the pool state"],writable:!0},{name:"position",writable:!0,pda:{seeds:[{kind:"const",value:[112,111,115,105,116,105,111,110]},{kind:"account",path:"position_nft_mint"}]}},{name:"token_a_mint",docs:["Token a mint"]},{name:"token_b_mint",docs:["Token b mint"]},{name:"token_a_vault",docs:["Token a vault for the pool"],writable:!0,pda:{seeds:[{kind:"const",value:[116,111,107,101,110,95,118,97,117,108,116]},{kind:"account",path:"token_a_mint"},{kind:"account",path:"pool"}]}},{name:"token_b_vault",docs:["Token b vault for the pool"],writable:!0,pda:{seeds:[{kind:"const",value:[116,111,107,101,110,95,118,97,117,108,116]},{kind:"account",path:"token_b_mint"},{kind:"account",path:"pool"}]}},{name:"payer_token_a",docs:["payer token a account"],writable:!0},{name:"payer_token_b",docs:["creator token b account"],writable:!0},{name:"token_a_program",docs:["Program to create mint account and mint tokens"]},{name:"token_b_program",docs:["Program to create mint account and mint tokens"]},{name:"token_2022_program",docs:["Program to create NFT mint/token account and transfer for token22 account"],address:"TokenzQdBNbLqP5VEhdkAS6EPFLC1PHnBqCXEpPxuEb"},{name:"system_program",address:"11111111111111111111111111111111"},{name:"event_authority",pda:{seeds:[{kind:"const",value:[95,95,101,118,101,110,116,95,97,117,116,104,111,114,105,116,121]}]}},{name:"program"}],args:[{name:"params",type:{defined:{name:"InitializeCustomizablePoolParameters"}}}]},{name:"initialize_pool",docs:["USER FUNCTIONS ////"],discriminator:[95,180,10,172,84,174,232,40],accounts:[{name:"creator"},{name:"position_nft_mint",docs:["position_nft_mint"],writable:!0,signer:!0},{name:"position_nft_account",docs:["position nft account"],writable:!0,pda:{seeds:[{kind:"const",value:[112,111,115,105,116,105,111,110,95,110,102,116,95,97,99,99,111,117,110,116]},{kind:"account",path:"position_nft_mint"}]}},{name:"payer",docs:["Address paying to create the pool. Can be anyone"],writable:!0,signer:!0},{name:"config",docs:["Which config the pool belongs to."]},{name:"pool_authority",pda:{seeds:[{kind:"const",value:[112,111,111,108,95,97,117,116,104,111,114,105,116,121]}]}},{name:"pool",docs:["Initialize an account to store the pool state"],writable:!0},{name:"position",writable:!0,pda:{seeds:[{kind:"const",value:[112,111,115,105,116,105,111,110]},{kind:"account",path:"position_nft_mint"}]}},{name:"token_a_mint",docs:["Token a mint"]},{name:"token_b_mint",docs:["Token b mint"]},{name:"token_a_vault",docs:["Token a vault for the pool"],writable:!0,pda:{seeds:[{kind:"const",value:[116,111,107,101,110,95,118,97,117,108,116]},{kind:"account",path:"token_a_mint"},{kind:"account",path:"pool"}]}},{name:"token_b_vault",docs:["Token b vault for the pool"],writable:!0,pda:{seeds:[{kind:"const",value:[116,111,107,101,110,95,118,97,117,108,116]},{kind:"account",path:"token_b_mint"},{kind:"account",path:"pool"}]}},{name:"payer_token_a",docs:["payer token a account"],writable:!0},{name:"payer_token_b",docs:["creator token b account"],writable:!0},{name:"token_a_program",docs:["Program to create mint account and mint tokens"]},{name:"token_b_program",docs:["Program to create mint account and mint tokens"]},{name:"token_2022_program",docs:["Program to create NFT mint/token account and transfer for token22 account"],address:"TokenzQdBNbLqP5VEhdkAS6EPFLC1PHnBqCXEpPxuEb"},{name:"system_program",address:"11111111111111111111111111111111"},{name:"event_authority",pda:{seeds:[{kind:"const",value:[95,95,101,118,101,110,116,95,97,117,116,104,111,114,105,116,121]}]}},{name:"program"}],args:[{name:"params",type:{defined:{name:"InitializePoolParameters"}}}]},{name:"initialize_pool_with_dynamic_config",discriminator:[149,82,72,197,253,252,68,15],accounts:[{name:"creator"},{name:"position_nft_mint",docs:["position_nft_mint"],writable:!0,signer:!0},{name:"position_nft_account",docs:["position nft account"],writable:!0,pda:{seeds:[{kind:"const",value:[112,111,115,105,116,105,111,110,95,110,102,116,95,97,99,99,111,117,110,116]},{kind:"account",path:"position_nft_mint"}]}},{name:"payer",docs:["Address paying to create the pool. Can be anyone"],writable:!0,signer:!0},{name:"pool_creator_authority",signer:!0,relations:["config"]},{name:"config",docs:["Which config the pool belongs to."]},{name:"pool_authority",pda:{seeds:[{kind:"const",value:[112,111,111,108,95,97,117,116,104,111,114,105,116,121]}]}},{name:"pool",docs:["Initialize an account to store the pool state"],writable:!0},{name:"position",writable:!0,pda:{seeds:[{kind:"const",value:[112,111,115,105,116,105,111,110]},{kind:"account",path:"position_nft_mint"}]}},{name:"token_a_mint",docs:["Token a mint"]},{name:"token_b_mint",docs:["Token b mint"]},{name:"token_a_vault",docs:["Token a vault for the pool"],writable:!0,pda:{seeds:[{kind:"const",value:[116,111,107,101,110,95,118,97,117,108,116]},{kind:"account",path:"token_a_mint"},{kind:"account",path:"pool"}]}},{name:"token_b_vault",docs:["Token b vault for the pool"],writable:!0,pda:{seeds:[{kind:"const",value:[116,111,107,101,110,95,118,97,117,108,116]},{kind:"account",path:"token_b_mint"},{kind:"account",path:"pool"}]}},{name:"payer_token_a",docs:["payer token a account"],writable:!0},{name:"payer_token_b",docs:["creator token b account"],writable:!0},{name:"token_a_program",docs:["Program to create mint account and mint tokens"]},{name:"token_b_program",docs:["Program to create mint account and mint tokens"]},{name:"token_2022_program",docs:["Program to create NFT mint/token account and transfer for token22 account"],address:"TokenzQdBNbLqP5VEhdkAS6EPFLC1PHnBqCXEpPxuEb"},{name:"system_program",address:"11111111111111111111111111111111"},{name:"event_authority",pda:{seeds:[{kind:"const",value:[95,95,101,118,101,110,116,95,97,117,116,104,111,114,105,116,121]}]}},{name:"program"}],args:[{name:"params",type:{defined:{name:"InitializeCustomizablePoolParameters"}}}]},{name:"initialize_reward",discriminator:[95,135,192,196,242,129,230,68],accounts:[{name:"pool_authority",pda:{seeds:[{kind:"const",value:[112,111,111,108,95,97,117,116,104,111,114,105,116,121]}]}},{name:"pool",writable:!0},{name:"reward_vault",writable:!0,pda:{seeds:[{kind:"const",value:[114,101,119,97,114,100,95,118,97,117,108,116]},{kind:"account",path:"pool"},{kind:"arg",path:"reward_index"}]}},{name:"reward_mint"},{name:"admin",writable:!0,signer:!0},{name:"token_program"},{name:"system_program",address:"11111111111111111111111111111111"},{name:"event_authority",pda:{seeds:[{kind:"const",value:[95,95,101,118,101,110,116,95,97,117,116,104,111,114,105,116,121]}]}},{name:"program"}],args:[{name:"reward_index",type:"u8"},{name:"reward_duration",type:"u64"},{name:"funder",type:"pubkey"}]},{name:"lock_position",discriminator:[227,62,2,252,247,10,171,185],accounts:[{name:"pool",relations:["position"]},{name:"position",writable:!0},{name:"vesting",writable:!0,signer:!0},{name:"position_nft_account",docs:["The token account for nft"]},{name:"owner",docs:["owner of position"],signer:!0},{name:"payer",writable:!0,signer:!0},{name:"system_program",address:"11111111111111111111111111111111"},{name:"event_authority",pda:{seeds:[{kind:"const",value:[95,95,101,118,101,110,116,95,97,117,116,104,111,114,105,116,121]}]}},{name:"program"}],args:[{name:"params",type:{defined:{name:"VestingParameters"}}}]},{name:"permanent_lock_position",discriminator:[165,176,125,6,231,171,186,213],accounts:[{name:"pool",writable:!0,relations:["position"]},{name:"position",writable:!0},{name:"position_nft_account",docs:["The token account for nft"]},{name:"owner",docs:["owner of position"],signer:!0},{name:"event_authority",pda:{seeds:[{kind:"const",value:[95,95,101,118,101,110,116,95,97,117,116,104,111,114,105,116,121]}]}},{name:"program"}],args:[{name:"permanent_lock_liquidity",type:"u128"}]},{name:"refresh_vesting",discriminator:[9,94,216,14,116,204,247,0],accounts:[{name:"pool",relations:["position"]},{name:"position",writable:!0},{name:"position_nft_account",docs:["The token account for nft"]},{name:"owner"}],args:[]},{name:"remove_all_liquidity",discriminator:[10,51,61,35,112,105,24,85],accounts:[{name:"pool_authority",pda:{seeds:[{kind:"const",value:[112,111,111,108,95,97,117,116,104,111,114,105,116,121]}]}},{name:"pool",writable:!0,relations:["position"]},{name:"position",writable:!0},{name:"token_a_account",docs:["The user token a account"],writable:!0},{name:"token_b_account",docs:["The user token b account"],writable:!0},{name:"token_a_vault",docs:["The vault token account for input token"],writable:!0,relations:["pool"]},{name:"token_b_vault",docs:["The vault token account for output token"],writable:!0,relations:["pool"]},{name:"token_a_mint",docs:["The mint of token a"],relations:["pool"]},{name:"token_b_mint",docs:["The mint of token b"],relations:["pool"]},{name:"position_nft_account",docs:["The token account for nft"]},{name:"owner",docs:["owner of position"],signer:!0},{name:"token_a_program",docs:["Token a program"]},{name:"token_b_program",docs:["Token b program"]},{name:"event_authority",pda:{seeds:[{kind:"const",value:[95,95,101,118,101,110,116,95,97,117,116,104,111,114,105,116,121]}]}},{name:"program"}],args:[{name:"token_a_amount_threshold",type:"u64"},{name:"token_b_amount_threshold",type:"u64"}]},{name:"remove_liquidity",discriminator:[80,85,209,72,24,206,177,108],accounts:[{name:"pool_authority",pda:{seeds:[{kind:"const",value:[112,111,111,108,95,97,117,116,104,111,114,105,116,121]}]}},{name:"pool",writable:!0,relations:["position"]},{name:"position",writable:!0},{name:"token_a_account",docs:["The user token a account"],writable:!0},{name:"token_b_account",docs:["The user token b account"],writable:!0},{name:"token_a_vault",docs:["The vault token account for input token"],writable:!0,relations:["pool"]},{name:"token_b_vault",docs:["The vault token account for output token"],writable:!0,relations:["pool"]},{name:"token_a_mint",docs:["The mint of token a"],relations:["pool"]},{name:"token_b_mint",docs:["The mint of token b"],relations:["pool"]},{name:"position_nft_account",docs:["The token account for nft"]},{name:"owner",docs:["owner of position"],signer:!0},{name:"token_a_program",docs:["Token a program"]},{name:"token_b_program",docs:["Token b program"]},{name:"event_authority",pda:{seeds:[{kind:"const",value:[95,95,101,118,101,110,116,95,97,117,116,104,111,114,105,116,121]}]}},{name:"program"}],args:[{name:"params",type:{defined:{name:"RemoveLiquidityParameters"}}}]},{name:"set_pool_status",discriminator:[112,87,135,223,83,204,132,53],accounts:[{name:"pool",writable:!0},{name:"admin",signer:!0},{name:"event_authority",pda:{seeds:[{kind:"const",value:[95,95,101,118,101,110,116,95,97,117,116,104,111,114,105,116,121]}]}},{name:"program"}],args:[{name:"status",type:"u8"}]},{name:"swap",discriminator:[248,198,158,145,225,117,135,200],accounts:[{name:"pool_authority",pda:{seeds:[{kind:"const",value:[112,111,111,108,95,97,117,116,104,111,114,105,116,121]}]}},{name:"pool",docs:["Pool account"],writable:!0},{name:"input_token_account",docs:["The user token account for input token"],writable:!0},{name:"output_token_account",docs:["The user token account for output token"],writable:!0},{name:"token_a_vault",docs:["The vault token account for input token"],writable:!0,relations:["pool"]},{name:"token_b_vault",docs:["The vault token account for output token"],writable:!0,relations:["pool"]},{name:"token_a_mint",docs:["The mint of token a"]},{name:"token_b_mint",docs:["The mint of token b"]},{name:"payer",docs:["The user performing the swap"],signer:!0},{name:"token_a_program",docs:["Token a program"]},{name:"token_b_program",docs:["Token b program"]},{name:"referral_token_account",docs:["referral token account"],writable:!0,optional:!0},{name:"event_authority",pda:{seeds:[{kind:"const",value:[95,95,101,118,101,110,116,95,97,117,116,104,111,114,105,116,121]}]}},{name:"program"}],args:[{name:"params",type:{defined:{name:"SwapParameters"}}}]},{name:"update_reward_duration",discriminator:[138,174,196,169,213,235,254,107],accounts:[{name:"pool",writable:!0},{name:"admin",signer:!0},{name:"event_authority",pda:{seeds:[{kind:"const",value:[95,95,101,118,101,110,116,95,97,117,116,104,111,114,105,116,121]}]}},{name:"program"}],args:[{name:"reward_index",type:"u8"},{name:"new_duration",type:"u64"}]},{name:"update_reward_funder",discriminator:[211,28,48,32,215,160,35,23],accounts:[{name:"pool",writable:!0},{name:"admin",signer:!0},{name:"event_authority",pda:{seeds:[{kind:"const",value:[95,95,101,118,101,110,116,95,97,117,116,104,111,114,105,116,121]}]}},{name:"program"}],args:[{name:"reward_index",type:"u8"},{name:"new_funder",type:"pubkey"}]},{name:"withdraw_ineligible_reward",discriminator:[148,206,42,195,247,49,103,8],accounts:[{name:"pool_authority",pda:{seeds:[{kind:"const",value:[112,111,111,108,95,97,117,116,104,111,114,105,116,121]}]}},{name:"pool",writable:!0},{name:"reward_vault",writable:!0},{name:"reward_mint"},{name:"funder_token_account",writable:!0},{name:"funder",signer:!0},{name:"token_program"},{name:"event_authority",pda:{seeds:[{kind:"const",value:[95,95,101,118,101,110,116,95,97,117,116,104,111,114,105,116,121]}]}},{name:"program"}],args:[{name:"reward_index",type:"u8"}]}],accounts:[{name:"ClaimFeeOperator",discriminator:[166,48,134,86,34,200,188,150]},{name:"Config",discriminator:[155,12,170,224,30,250,204,130]},{name:"Pool",discriminator:[241,154,109,4,17,177,109,188]},{name:"Position",discriminator:[170,188,143,228,122,64,247,208]},{name:"TokenBadge",discriminator:[116,219,204,229,249,116,255,150]},{name:"Vesting",discriminator:[100,149,66,138,95,200,128,241]}],events:[{name:"EvtAddLiquidity",discriminator:[175,242,8,157,30,247,185,169]},{name:"EvtClaimPartnerFee",discriminator:[118,99,77,10,226,1,1,87]},{name:"EvtClaimPositionFee",discriminator:[198,182,183,52,97,12,49,56]},{name:"EvtClaimProtocolFee",discriminator:[186,244,75,251,188,13,25,33]},{name:"EvtClaimReward",discriminator:[218,86,147,200,235,188,215,231]},{name:"EvtCloseClaimFeeOperator",discriminator:[111,39,37,55,110,216,194,23]},{name:"EvtCloseConfig",discriminator:[36,30,239,45,58,132,14,5]},{name:"EvtClosePosition",discriminator:[20,145,144,68,143,142,214,178]},{name:"EvtCreateClaimFeeOperator",discriminator:[21,6,153,120,68,116,28,177]},{name:"EvtCreateConfig",discriminator:[131,207,180,174,180,73,165,54]},{name:"EvtCreateDynamicConfig",discriminator:[231,197,13,164,248,213,133,152]},{name:"EvtCreatePosition",discriminator:[156,15,119,198,29,181,221,55]},{name:"EvtCreateTokenBadge",discriminator:[141,120,134,116,34,28,114,160]},{name:"EvtFundReward",discriminator:[104,233,237,122,199,191,121,85]},{name:"EvtInitializePool",discriminator:[228,50,246,85,203,66,134,37]},{name:"EvtInitializeReward",discriminator:[129,91,188,3,246,52,185,249]},{name:"EvtLockPosition",discriminator:[168,63,108,83,219,82,2,200]},{name:"EvtPermanentLockPosition",discriminator:[145,143,162,218,218,80,67,11]},{name:"EvtRemoveLiquidity",discriminator:[87,46,88,98,175,96,34,91]},{name:"EvtSetPoolStatus",discriminator:[100,213,74,3,95,91,228,146]},{name:"EvtSwap",discriminator:[27,60,21,213,138,170,187,147]},{name:"EvtUpdateRewardDuration",discriminator:[149,135,65,231,129,153,65,57]},{name:"EvtUpdateRewardFunder",discriminator:[76,154,208,13,40,115,246,146]},{name:"EvtWithdrawIneligibleReward",discriminator:[248,215,184,78,31,180,179,168]}],errors:[{code:6e3,name:"MathOverflow",msg:"Math operation overflow"},{code:6001,name:"InvalidFee",msg:"Invalid fee setup"},{code:6002,name:"ExceededSlippage",msg:"Exceeded slippage tolerance"},{code:6003,name:"PoolDisabled",msg:"Pool disabled"},{code:6004,name:"ExceedMaxFeeBps",msg:"Exceeded max fee bps"},{code:6005,name:"InvalidAdmin",msg:"Invalid admin"},{code:6006,name:"AmountIsZero",msg:"Amount is zero"},{code:6007,name:"TypeCastFailed",msg:"Type cast error"},{code:6008,name:"UnableToModifyActivationPoint",msg:"Unable to modify activation point"},{code:6009,name:"InvalidAuthorityToCreateThePool",msg:"Invalid authority to create the pool"},{code:6010,name:"InvalidActivationType",msg:"Invalid activation type"},{code:6011,name:"InvalidActivationPoint",msg:"Invalid activation point"},{code:6012,name:"InvalidQuoteMint",msg:"Quote token must be SOL,USDC"},{code:6013,name:"InvalidFeeCurve",msg:"Invalid fee curve"},{code:6014,name:"InvalidPriceRange",msg:"Invalid Price Range"},{code:6015,name:"PriceRangeViolation",msg:"Trade is over price range"},{code:6016,name:"InvalidParameters",msg:"Invalid parameters"},{code:6017,name:"InvalidCollectFeeMode",msg:"Invalid collect fee mode"},{code:6018,name:"InvalidInput",msg:"Invalid input"},{code:6019,name:"CannotCreateTokenBadgeOnSupportedMint",msg:"Cannot create token badge on supported mint"},{code:6020,name:"InvalidTokenBadge",msg:"Invalid token badge"},{code:6021,name:"InvalidMinimumLiquidity",msg:"Invalid minimum liquidity"},{code:6022,name:"InvalidVestingInfo",msg:"Invalid vesting information"},{code:6023,name:"InsufficientLiquidity",msg:"Insufficient liquidity"},{code:6024,name:"InvalidVestingAccount",msg:"Invalid vesting account"},{code:6025,name:"InvalidPoolStatus",msg:"Invalid pool status"},{code:6026,name:"UnsupportNativeMintToken2022",msg:"Unsupported native mint token2022"},{code:6027,name:"InvalidRewardIndex",msg:"Invalid reward index"},{code:6028,name:"InvalidRewardDuration",msg:"Invalid reward duration"},{code:6029,name:"RewardInitialized",msg:"Reward already initialized"},{code:6030,name:"RewardUninitialized",msg:"Reward not initialized"},{code:6031,name:"InvalidRewardVault",msg:"Invalid reward vault"},{code:6032,name:"MustWithdrawnIneligibleReward",msg:"Must withdraw ineligible reward"},{code:6033,name:"IdenticalRewardDuration",msg:"Reward duration is the same"},{code:6034,name:"RewardCampaignInProgress",msg:"Reward campaign in progress"},{code:6035,name:"IdenticalFunder",msg:"Identical funder"},{code:6036,name:"InvalidFunder",msg:"Invalid funder"},{code:6037,name:"RewardNotEnded",msg:"Reward not ended"},{code:6038,name:"FeeInverseIsIncorrect",msg:"Fee inverse is incorrect"},{code:6039,name:"PositionIsNotEmpty",msg:"Position is not empty"},{code:6040,name:"InvalidPoolCreatorAuthority",msg:"Invalid pool creator authority"},{code:6041,name:"InvalidConfigType",msg:"Invalid config type"}],types:[{name:"AddLiquidityParameters",type:{kind:"struct",fields:[{name:"liquidity_delta",docs:["delta liquidity"],type:"u128"},{name:"token_a_amount_threshold",docs:["maximum token a amount"],type:"u64"},{name:"token_b_amount_threshold",docs:["maximum token b amount"],type:"u64"}]}},{name:"BaseFeeConfig",serialization:"bytemuck",repr:{kind:"c"},type:{kind:"struct",fields:[{name:"cliff_fee_numerator",type:"u64"},{name:"fee_scheduler_mode",type:"u8"},{name:"padding",type:{array:["u8",5]}},{name:"number_of_period",type:"u16"},{name:"period_frequency",type:"u64"},{name:"reduction_factor",type:"u64"}]}},{name:"BaseFeeParameters",type:{kind:"struct",fields:[{name:"cliff_fee_numerator",type:"u64"},{name:"number_of_period",type:"u16"},{name:"period_frequency",type:"u64"},{name:"reduction_factor",type:"u64"},{name:"fee_scheduler_mode",type:"u8"}]}},{name:"BaseFeeStruct",serialization:"bytemuck",repr:{kind:"c"},type:{kind:"struct",fields:[{name:"cliff_fee_numerator",type:"u64"},{name:"fee_scheduler_mode",type:"u8"},{name:"padding_0",type:{array:["u8",5]}},{name:"number_of_period",type:"u16"},{name:"period_frequency",type:"u64"},{name:"reduction_factor",type:"u64"},{name:"padding_1",type:"u64"}]}},{name:"ClaimFeeOperator",docs:["Parameter that set by the protocol"],serialization:"bytemuck",repr:{kind:"c"},type:{kind:"struct",fields:[{name:"operator",docs:["operator"],type:"pubkey"},{name:"_padding",docs:["Reserve"],type:{array:["u8",128]}}]}},{name:"Config",serialization:"bytemuck",repr:{kind:"c"},type:{kind:"struct",fields:[{name:"vault_config_key",docs:["Vault config key"],type:"pubkey"},{name:"pool_creator_authority",docs:["Only pool_creator_authority can use the current config to initialize new pool. When it's Pubkey::default, it's a public config."],type:"pubkey"},{name:"pool_fees",docs:["Pool fee"],type:{defined:{name:"PoolFeesConfig"}}},{name:"activation_type",docs:["Activation type"],type:"u8"},{name:"collect_fee_mode",docs:["Collect fee mode"],type:"u8"},{name:"config_type",docs:["Config type mode, 0 for static, 1 for dynamic"],type:"u8"},{name:"_padding_0",docs:["padding 0"],type:{array:["u8",5]}},{name:"index",docs:["config index"],type:"u64"},{name:"sqrt_min_price",docs:["sqrt min price"],type:"u128"},{name:"sqrt_max_price",docs:["sqrt max price"],type:"u128"},{name:"_padding_1",docs:["Fee curve point","Padding for further use"],type:{array:["u64",10]}}]}},{name:"DynamicConfigParameters",type:{kind:"struct",fields:[{name:"pool_creator_authority",type:"pubkey"}]}},{name:"DynamicFeeConfig",serialization:"bytemuck",repr:{kind:"c"},type:{kind:"struct",fields:[{name:"initialized",type:"u8"},{name:"padding",type:{array:["u8",7]}},{name:"max_volatility_accumulator",type:"u32"},{name:"variable_fee_control",type:"u32"},{name:"bin_step",type:"u16"},{name:"filter_period",type:"u16"},{name:"decay_period",type:"u16"},{name:"reduction_factor",type:"u16"},{name:"padding_1",type:{array:["u8",8]}},{name:"bin_step_u128",type:"u128"}]}},{name:"DynamicFeeParameters",type:{kind:"struct",fields:[{name:"bin_step",type:"u16"},{name:"bin_step_u128",type:"u128"},{name:"filter_period",type:"u16"},{name:"decay_period",type:"u16"},{name:"reduction_factor",type:"u16"},{name:"max_volatility_accumulator",type:"u32"},{name:"variable_fee_control",type:"u32"}]}},{name:"DynamicFeeStruct",serialization:"bytemuck",repr:{kind:"c"},type:{kind:"struct",fields:[{name:"initialized",type:"u8"},{name:"padding",type:{array:["u8",7]}},{name:"max_volatility_accumulator",type:"u32"},{name:"variable_fee_control",type:"u32"},{name:"bin_step",type:"u16"},{name:"filter_period",type:"u16"},{name:"decay_period",type:"u16"},{name:"reduction_factor",type:"u16"},{name:"last_update_timestamp",type:"u64"},{name:"bin_step_u128",type:"u128"},{name:"sqrt_price_reference",type:"u128"},{name:"volatility_accumulator",type:"u128"},{name:"volatility_reference",type:"u128"}]}},{name:"EvtAddLiquidity",type:{kind:"struct",fields:[{name:"pool",type:"pubkey"},{name:"position",type:"pubkey"},{name:"owner",type:"pubkey"},{name:"params",type:{defined:{name:"AddLiquidityParameters"}}},{name:"token_a_amount",type:"u64"},{name:"token_b_amount",type:"u64"},{name:"total_amount_a",type:"u64"},{name:"total_amount_b",type:"u64"}]}},{name:"EvtClaimPartnerFee",type:{kind:"struct",fields:[{name:"pool",type:"pubkey"},{name:"token_a_amount",type:"u64"},{name:"token_b_amount",type:"u64"}]}},{name:"EvtClaimPositionFee",type:{kind:"struct",fields:[{name:"pool",type:"pubkey"},{name:"position",type:"pubkey"},{name:"owner",type:"pubkey"},{name:"fee_a_claimed",type:"u64"},{name:"fee_b_claimed",type:"u64"}]}},{name:"EvtClaimProtocolFee",type:{kind:"struct",fields:[{name:"pool",type:"pubkey"},{name:"token_a_amount",type:"u64"},{name:"token_b_amount",type:"u64"}]}},{name:"EvtClaimReward",type:{kind:"struct",fields:[{name:"pool",type:"pubkey"},{name:"position",type:"pubkey"},{name:"owner",type:"pubkey"},{name:"mint_reward",type:"pubkey"},{name:"reward_index",type:"u8"},{name:"total_reward",type:"u64"}]}},{name:"EvtCloseClaimFeeOperator",docs:["Close claim fee operator"],type:{kind:"struct",fields:[{name:"claim_fee_operator",type:"pubkey"},{name:"operator",type:"pubkey"}]}},{name:"EvtCloseConfig",docs:["Close config"],type:{kind:"struct",fields:[{name:"config",docs:["Config pubkey"],type:"pubkey"},{name:"admin",docs:["admin pk"],type:"pubkey"}]}},{name:"EvtClosePosition",type:{kind:"struct",fields:[{name:"pool",type:"pubkey"},{name:"owner",type:"pubkey"},{name:"position",type:"pubkey"},{name:"position_nft_mint",type:"pubkey"}]}},{name:"EvtCreateClaimFeeOperator",docs:["Create claim fee operator"],type:{kind:"struct",fields:[{name:"operator",type:"pubkey"}]}},{name:"EvtCreateConfig",docs:["Create static config"],type:{kind:"struct",fields:[{name:"pool_fees",type:{defined:{name:"PoolFeeParameters"}}},{name:"vault_config_key",type:"pubkey"},{name:"pool_creator_authority",type:"pubkey"},{name:"activation_type",type:"u8"},{name:"sqrt_min_price",type:"u128"},{name:"sqrt_max_price",type:"u128"},{name:"collect_fee_mode",type:"u8"},{name:"index",type:"u64"},{name:"config",type:"pubkey"}]}},{name:"EvtCreateDynamicConfig",docs:["Create dynamic config"],type:{kind:"struct",fields:[{name:"config",type:"pubkey"},{name:"pool_creator_authority",type:"pubkey"},{name:"index",type:"u64"}]}},{name:"EvtCreatePosition",type:{kind:"struct",fields:[{name:"pool",type:"pubkey"},{name:"owner",type:"pubkey"},{name:"position",type:"pubkey"},{name:"position_nft_mint",type:"pubkey"}]}},{name:"EvtCreateTokenBadge",docs:["Create token badge"],type:{kind:"struct",fields:[{name:"token_mint",type:"pubkey"}]}},{name:"EvtFundReward",type:{kind:"struct",fields:[{name:"pool",type:"pubkey"},{name:"funder",type:"pubkey"},{name:"mint_reward",type:"pubkey"},{name:"reward_index",type:"u8"},{name:"amount",type:"u64"},{name:"transfer_fee_excluded_amount_in",type:"u64"}]}},{name:"EvtInitializePool",type:{kind:"struct",fields:[{name:"pool",type:"pubkey"},{name:"token_a_mint",type:"pubkey"},{name:"token_b_mint",type:"pubkey"},{name:"creator",type:"pubkey"},{name:"payer",type:"pubkey"},{name:"alpha_vault",type:"pubkey"},{name:"pool_fees",type:{defined:{name:"PoolFeeParameters"}}},{name:"sqrt_min_price",type:"u128"},{name:"sqrt_max_price",type:"u128"},{name:"activation_type",type:"u8"},{name:"collect_fee_mode",type:"u8"},{name:"liquidity",type:"u128"},{name:"sqrt_price",type:"u128"},{name:"activation_point",type:"u64"},{name:"token_a_flag",type:"u8"},{name:"token_b_flag",type:"u8"},{name:"token_a_amount",type:"u64"},{name:"token_b_amount",type:"u64"},{name:"total_amount_a",type:"u64"},{name:"total_amount_b",type:"u64"},{name:"pool_type",type:"u8"}]}},{name:"EvtInitializeReward",type:{kind:"struct",fields:[{name:"pool",type:"pubkey"},{name:"reward_mint",type:"pubkey"},{name:"funder",type:"pubkey"},{name:"reward_index",type:"u8"},{name:"reward_duration",type:"u64"}]}},{name:"EvtLockPosition",type:{kind:"struct",fields:[{name:"pool",type:"pubkey"},{name:"position",type:"pubkey"},{name:"owner",type:"pubkey"},{name:"vesting",type:"pubkey"},{name:"cliff_point",type:"u64"},{name:"period_frequency",type:"u64"},{name:"cliff_unlock_liquidity",type:"u128"},{name:"liquidity_per_period",type:"u128"},{name:"number_of_period",type:"u16"}]}},{name:"EvtPermanentLockPosition",type:{kind:"struct",fields:[{name:"pool",type:"pubkey"},{name:"position",type:"pubkey"},{name:"lock_liquidity_amount",type:"u128"},{name:"total_permanent_locked_liquidity",type:"u128"}]}},{name:"EvtRemoveLiquidity",type:{kind:"struct",fields:[{name:"pool",type:"pubkey"},{name:"position",type:"pubkey"},{name:"owner",type:"pubkey"},{name:"params",type:{defined:{name:"RemoveLiquidityParameters"}}},{name:"token_a_amount",type:"u64"},{name:"token_b_amount",type:"u64"}]}},{name:"EvtSetPoolStatus",type:{kind:"struct",fields:[{name:"pool",type:"pubkey"},{name:"status",type:"u8"}]}},{name:"EvtSwap",type:{kind:"struct",fields:[{name:"pool",type:"pubkey"},{name:"trade_direction",type:"u8"},{name:"has_referral",type:"bool"},{name:"params",type:{defined:{name:"SwapParameters"}}},{name:"swap_result",type:{defined:{name:"SwapResult"}}},{name:"actual_amount_in",type:"u64"},{name:"current_timestamp",type:"u64"}]}},{name:"EvtUpdateRewardDuration",type:{kind:"struct",fields:[{name:"pool",type:"pubkey"},{name:"reward_index",type:"u8"},{name:"old_reward_duration",type:"u64"},{name:"new_reward_duration",type:"u64"}]}},{name:"EvtUpdateRewardFunder",type:{kind:"struct",fields:[{name:"pool",type:"pubkey"},{name:"reward_index",type:"u8"},{name:"old_funder",type:"pubkey"},{name:"new_funder",type:"pubkey"}]}},{name:"EvtWithdrawIneligibleReward",type:{kind:"struct",fields:[{name:"pool",type:"pubkey"},{name:"reward_mint",type:"pubkey"},{name:"amount",type:"u64"}]}},{name:"InitializeCustomizablePoolParameters",type:{kind:"struct",fields:[{name:"pool_fees",docs:["pool fees"],type:{defined:{name:"PoolFeeParameters"}}},{name:"sqrt_min_price",docs:["sqrt min price"],type:"u128"},{name:"sqrt_max_price",docs:["sqrt max price"],type:"u128"},{name:"has_alpha_vault",docs:["has alpha vault"],type:"bool"},{name:"liquidity",docs:["initialize liquidity"],type:"u128"},{name:"sqrt_price",docs:["The init price of the pool as a sqrt(token_b/token_a) Q64.64 value"],type:"u128"},{name:"activation_type",docs:["activation type"],type:"u8"},{name:"collect_fee_mode",docs:["collect fee mode"],type:"u8"},{name:"activation_point",docs:["activation point"],type:{option:"u64"}}]}},{name:"InitializePoolParameters",type:{kind:"struct",fields:[{name:"liquidity",docs:["initialize liquidity"],type:"u128"},{name:"sqrt_price",docs:["The init price of the pool as a sqrt(token_b/token_a) Q64.64 value"],type:"u128"},{name:"activation_point",docs:["activation point"],type:{option:"u64"}}]}},{name:"Pool",serialization:"bytemuck",repr:{kind:"c"},type:{kind:"struct",fields:[{name:"pool_fees",docs:["Pool fee"],type:{defined:{name:"PoolFeesStruct"}}},{name:"token_a_mint",docs:["token a mint"],type:"pubkey"},{name:"token_b_mint",docs:["token b mint"],type:"pubkey"},{name:"token_a_vault",docs:["token a vault"],type:"pubkey"},{name:"token_b_vault",docs:["token b vault"],type:"pubkey"},{name:"whitelisted_vault",docs:["Whitelisted vault to be able to buy pool before activation_point"],type:"pubkey"},{name:"partner",docs:["partner"],type:"pubkey"},{name:"liquidity",docs:["liquidity share"],type:"u128"},{name:"_padding",docs:["padding, previous reserve amount, be careful to use that field"],type:"u128"},{name:"protocol_a_fee",docs:["protocol a fee"],type:"u64"},{name:"protocol_b_fee",docs:["protocol b fee"],type:"u64"},{name:"partner_a_fee",docs:["partner a fee"],type:"u64"},{name:"partner_b_fee",docs:["partner b fee"],type:"u64"},{name:"sqrt_min_price",docs:["min price"],type:"u128"},{name:"sqrt_max_price",docs:["max price"],type:"u128"},{name:"sqrt_price",docs:["current price"],type:"u128"},{name:"activation_point",docs:["Activation point, can be slot or timestamp"],type:"u64"},{name:"activation_type",docs:["Activation type, 0 means by slot, 1 means by timestamp"],type:"u8"},{name:"pool_status",docs:["pool status, 0: enable, 1 disable"],type:"u8"},{name:"token_a_flag",docs:["token a flag"],type:"u8"},{name:"token_b_flag",docs:["token b flag"],type:"u8"},{name:"collect_fee_mode",docs:["0 is collect fee in both token, 1 only collect fee in token a, 2 only collect fee in token b"],type:"u8"},{name:"pool_type",docs:["pool type"],type:"u8"},{name:"_padding_0",docs:["padding"],type:{array:["u8",2]}},{name:"fee_a_per_liquidity",docs:["cumulative"],type:{array:["u8",32]}},{name:"fee_b_per_liquidity",docs:["cumulative"],type:{array:["u8",32]}},{name:"permanent_lock_liquidity",type:"u128"},{name:"metrics",docs:["metrics"],type:{defined:{name:"PoolMetrics"}}},{name:"_padding_1",docs:["Padding for further use"],type:{array:["u64",10]}},{name:"reward_infos",docs:["Farming reward information"],type:{array:[{defined:{name:"RewardInfo"}},2]}}]}},{name:"PoolFeeParameters",docs:["Information regarding fee charges"],type:{kind:"struct",fields:[{name:"base_fee",docs:["Base fee"],type:{defined:{name:"BaseFeeParameters"}}},{name:"protocol_fee_percent",docs:["Protocol trade fee percent"],type:"u8"},{name:"partner_fee_percent",docs:["partner fee percent"],type:"u8"},{name:"referral_fee_percent",docs:["referral fee percent"],type:"u8"},{name:"dynamic_fee",docs:["dynamic fee"],type:{option:{defined:{name:"DynamicFeeParameters"}}}}]}},{name:"PoolFeesConfig",serialization:"bytemuck",repr:{kind:"c"},type:{kind:"struct",fields:[{name:"base_fee",type:{defined:{name:"BaseFeeConfig"}}},{name:"dynamic_fee",type:{defined:{name:"DynamicFeeConfig"}}},{name:"protocol_fee_percent",type:"u8"},{name:"partner_fee_percent",type:"u8"},{name:"referral_fee_percent",type:"u8"},{name:"padding_0",type:{array:["u8",5]}},{name:"padding_1",type:{array:["u64",5]}}]}},{name:"PoolFeesStruct",docs:["Information regarding fee charges","trading_fee = amount * trade_fee_numerator / denominator","protocol_fee = trading_fee * protocol_fee_percentage / 100","referral_fee = protocol_fee * referral_percentage / 100","partner_fee = (protocol_fee - referral_fee) * partner_fee_percentage / denominator"],serialization:"bytemuck",repr:{kind:"c"},type:{kind:"struct",fields:[{name:"base_fee",docs:["Trade fees are extra token amounts that are held inside the token","accounts during a trade, making the value of liquidity tokens rise.","Trade fee numerator"],type:{defined:{name:"BaseFeeStruct"}}},{name:"protocol_fee_percent",docs:["Protocol trading fees are extra token amounts that are held inside the token","accounts during a trade, with the equivalent in pool tokens minted to","the protocol of the program.","Protocol trade fee numerator"],type:"u8"},{name:"partner_fee_percent",docs:["partner fee"],type:"u8"},{name:"referral_fee_percent",docs:["referral fee"],type:"u8"},{name:"padding_0",docs:["padding"],type:{array:["u8",5]}},{name:"dynamic_fee",docs:["dynamic fee"],type:{defined:{name:"DynamicFeeStruct"}}},{name:"padding_1",docs:["padding"],type:{array:["u64",2]}}]}},{name:"PoolMetrics",serialization:"bytemuck",repr:{kind:"c"},type:{kind:"struct",fields:[{name:"total_lp_a_fee",type:"u128"},{name:"total_lp_b_fee",type:"u128"},{name:"total_protocol_a_fee",type:"u64"},{name:"total_protocol_b_fee",type:"u64"},{name:"total_partner_a_fee",type:"u64"},{name:"total_partner_b_fee",type:"u64"},{name:"total_position",type:"u64"},{name:"padding",type:"u64"}]}},{name:"Position",serialization:"bytemuck",repr:{kind:"c"},type:{kind:"struct",fields:[{name:"pool",type:"pubkey"},{name:"nft_mint",docs:["nft mint"],type:"pubkey"},{name:"fee_a_per_token_checkpoint",docs:["fee a checkpoint"],type:{array:["u8",32]}},{name:"fee_b_per_token_checkpoint",docs:["fee b checkpoint"],type:{array:["u8",32]}},{name:"fee_a_pending",docs:["fee a pending"],type:"u64"},{name:"fee_b_pending",docs:["fee b pending"],type:"u64"},{name:"unlocked_liquidity",docs:["unlock liquidity"],type:"u128"},{name:"vested_liquidity",docs:["vesting liquidity"],type:"u128"},{name:"permanent_locked_liquidity",docs:["permanent locked liquidity"],type:"u128"},{name:"metrics",docs:["metrics"],type:{defined:{name:"PositionMetrics"}}},{name:"reward_infos",docs:["Farming reward information"],type:{array:[{defined:{name:"UserRewardInfo"}},2]}},{name:"padding",docs:["padding for future usage"],type:{array:["u128",6]}}]}},{name:"PositionMetrics",serialization:"bytemuck",repr:{kind:"c"},type:{kind:"struct",fields:[{name:"total_claimed_a_fee",type:"u64"},{name:"total_claimed_b_fee",type:"u64"}]}},{name:"RemoveLiquidityParameters",type:{kind:"struct",fields:[{name:"liquidity_delta",docs:["delta liquidity"],type:"u128"},{name:"token_a_amount_threshold",docs:["minimum token a amount"],type:"u64"},{name:"token_b_amount_threshold",docs:["minimum token b amount"],type:"u64"}]}},{name:"RewardInfo",docs:["Stores the state relevant for tracking liquidity mining rewards"],serialization:"bytemuck",repr:{kind:"c"},type:{kind:"struct",fields:[{name:"initialized",docs:["Indicates if the reward has been initialized"],type:"u8"},{name:"reward_token_flag",docs:["reward token flag"],type:"u8"},{name:"_padding_0",docs:["padding"],type:{array:["u8",6]}},{name:"_padding_1",docs:["Padding to ensure `reward_rate: u128` is 16-byte aligned"],type:{array:["u8",8]}},{name:"mint",docs:["Reward token mint."],type:"pubkey"},{name:"vault",docs:["Reward vault token account."],type:"pubkey"},{name:"funder",docs:["Authority account that allows to fund rewards"],type:"pubkey"},{name:"reward_duration",docs:["reward duration"],type:"u64"},{name:"reward_duration_end",docs:["reward duration end"],type:"u64"},{name:"reward_rate",docs:["reward rate"],type:"u128"},{name:"reward_per_token_stored",docs:["Reward per token stored"],type:{array:["u8",32]}},{name:"last_update_time",docs:["The last time reward states were updated."],type:"u64"},{name:"cumulative_seconds_with_empty_liquidity_reward",docs:["Accumulated seconds when the farm distributed rewards but the bin was empty.","These rewards will be carried over to the next reward time window."],type:"u64"}]}},{name:"StaticConfigParameters",type:{kind:"struct",fields:[{name:"pool_fees",type:{defined:{name:"PoolFeeParameters"}}},{name:"sqrt_min_price",type:"u128"},{name:"sqrt_max_price",type:"u128"},{name:"vault_config_key",type:"pubkey"},{name:"pool_creator_authority",type:"pubkey"},{name:"activation_type",type:"u8"},{name:"collect_fee_mode",type:"u8"}]}},{name:"SwapParameters",type:{kind:"struct",fields:[{name:"amount_in",type:"u64"},{name:"minimum_amount_out",type:"u64"}]}},{name:"SwapResult",docs:["Encodes all results of swapping"],type:{kind:"struct",fields:[{name:"output_amount",type:"u64"},{name:"next_sqrt_price",type:"u128"},{name:"lp_fee",type:"u64"},{name:"protocol_fee",type:"u64"},{name:"partner_fee",type:"u64"},{name:"referral_fee",type:"u64"}]}},{name:"TokenBadge",docs:["Parameter that set by the protocol"],serialization:"bytemuck",repr:{kind:"c"},type:{kind:"struct",fields:[{name:"token_mint",docs:["token mint"],type:"pubkey"},{name:"_padding",docs:["Reserve"],type:{array:["u8",128]}}]}},{name:"UserRewardInfo",serialization:"bytemuck",repr:{kind:"c"},type:{kind:"struct",fields:[{name:"reward_per_token_checkpoint",docs:["The latest update reward checkpoint"],type:{array:["u8",32]}},{name:"reward_pendings",docs:["Current pending rewards"],type:"u64"},{name:"total_claimed_rewards",docs:["Total claimed rewards"],type:"u64"}]}},{name:"Vesting",serialization:"bytemuck",repr:{kind:"c"},type:{kind:"struct",fields:[{name:"position",type:"pubkey"},{name:"cliff_point",type:"u64"},{name:"period_frequency",type:"u64"},{name:"cliff_unlock_liquidity",type:"u128"},{name:"liquidity_per_period",type:"u128"},{name:"total_released_liquidity",type:"u128"},{name:"number_of_period",type:"u16"},{name:"padding",type:{array:["u8",14]}},{name:"padding2",type:{array:["u128",4]}}]}},{name:"VestingParameters",type:{kind:"struct",fields:[{name:"cliff_point",type:{option:"u64"}},{name:"period_frequency",type:"u64"},{name:"cliff_unlock_liquidity",type:"u128"},{name:"liquidity_per_period",type:"u128"},{name:"number_of_period",type:"u16"}]}}]},h=(e=>(e[e.Up=0]="Up",e[e.Down=1]="Down",e))(h||{}),g=(e=>(e[e.Timestamp=0]="Timestamp",e[e.Slot=1]="Slot",e))(g||{}),b=(e=>(e[e.Linear=0]="Linear",e[e.Exponential=1]="Exponential",e))(b||{}),w=(e=>(e[e.BothToken=0]="BothToken",e[e.OnlyB=1]="OnlyB",e))(w||{}),v=(e=>(e[e.AtoB=0]="AtoB",e[e.BtoA=1]="BtoA",e))(v||{}),P=(e=>(e[e.Slot=0]="Slot",e[e.Timestamp=1]="Timestamp",e))(P||{}),A=new r.PublicKey("cpamdpZCGKUy5JxQXB4dcpGPiikHawvSWAd6mEn1sGG");function B(e,t){let n=e.toBuffer(),a=t.toBuffer();return 1===_.compare(n,a)?n:a}function q(e,t){let n=e.toBuffer(),a=t.toBuffer();return 1===_.compare(n,a)?a:n}function T(e,t,n){return r.PublicKey.findProgramAddressSync([_.from("pool"),e.toBuffer(),B(t,n),q(t,n)],A)[0]}function I(e){return r.PublicKey.findProgramAddressSync([_.from("position"),e.toBuffer()],A)[0]}function C(e,t){return r.PublicKey.findProgramAddressSync([_.from("token_vault"),e.toBuffer(),t.toBuffer()],A)[0]}function F(e){return r.PublicKey.findProgramAddressSync([_.from("token_badge"),e.toBuffer()],A)[0]}function N(e){return r.PublicKey.findProgramAddressSync([_.from("position_nft_account"),e.toBuffer()],A)[0]}function E(e){return 0==e?o.x5:o.sy}new a.BN("4295048016"),new a.BN("79226673521066979257578248091"),new a.BN("1844674407370955");var S=(e,t,n,...a)=>f(null,[e,t,n,...a],function*(e,t,n,a=n,o=!0,i){let r=(0,s.Xt)(t,n,o,i);try{return yield(0,u.sU)(e,r),{ataPubkey:r,ix:void 0}}catch(e){if(e instanceof d.kD||e instanceof d.bY){let e=(0,m.CA)(a,r,n,t,i);return{ataPubkey:r,ix:e}}throw console.error("Error::getOrCreateATAInstruction",e),e}}),x=(e,t,n)=>[r.SystemProgram.transfer({fromPubkey:e,toPubkey:t,lamports:n}),new r.TransactionInstruction({keys:[{pubkey:t,isSigner:!1,isWritable:!0}],data:_.from(new Uint8Array([17])),programId:o.x5})],L=(e,...t)=>f(null,[e,...t],function*(e,t=e,n=!0){let a=(0,s.Xt)(o.FX,e,n);return a?(0,c.wy)(a,t,e,[],o.x5):null}),R=new a.BN(524288),z=new a.BN(1).shln(64),O=new a.BN(2).pow(new a.BN(128)).sub(new a.BN(1));function M(e,t,n){let a=e.mul(t).mul(n),o=n.sub(t);return a.div(o)}function X(e,t,n){let a=n.sub(t);return e.shln(128).div(a)}function Z(e,t,n,o){let i=e.mul(n.sub(t)),r=t.mul(n);return 0==o?i.add(r.sub(new a.BN(1))).div(r):i.div(r)}function D(e,t,n,o){let i=new a.BN(1).shln(128),r=t.sub(n),s=e.mul(r);return 0==o?s.add(i.sub(new a.BN(1))).div(i):s.shrn(128)}function U(e,t){var n=new a.BN(1e9);let{div:o,mod:i}=e.mul(t).divmod(n);return i.isZero()?o:o.add(new a.BN(1))}var V=(e,t,n,a,o="confirmed")=>f(null,null,function*(){var i,r,s;let u=new VersionedTransaction(new TransactionMessage({instructions:[ComputeBudgetProgram.setComputeUnitLimit({units:14e5}),...t],payerKey:n,recentBlockhash:PublicKey4.default.toString()}).compileToV0Message(a)),d=yield e.simulateTransaction(u,{replaceRecentBlockhash:!0,sigVerify:!1,commitment:o});if(null==(i=null==d?void 0:d.value)?void 0:i.err){let e=(null==(r=d.value.logs)?void 0:r.join("\n  • "))||"No logs available";throw Error(`Transaction simulation failed:
  \u2022${e}`+JSON.stringify(null==(s=null==d?void 0:d.value)?void 0:s.err))}return d.value.unitsConsumed||null}),W=(e,t)=>e.mul(new a.BN((100-t)/100*1e4)).div(new a.BN(1e4)),Q=(e,t)=>{let n=e.pow(new a.BN(2)).sub(t.pow(new a.BN(2))).abs();return new l.A(n.toString()).div(new l.A(t.pow(new a.BN(2)).toString())).mul(100).toNumber()},K=(e,t)=>{let n=t.unlockedLiquidity.add(t.vestedLiquidity).add(t.permanentLockedLiquidity),o=new a.BN(_.from(e.feeAPerLiquidity).reverse()).sub(new a.BN(_.from(t.feeAPerTokenCheckpoint).reverse())),i=new a.BN(_.from(e.feeBPerLiquidity).reverse()).sub(new a.BN(_.from(t.feeBPerTokenCheckpoint).reverse())),r=n.mul(o).shrn(128),s=n.mul(i).shrn(128);return{feeTokenA:t.feeAPending.add(r),feeTokenB:t.feeBPending.add(s),rewards:t.rewardInfos.length>0?t.rewardInfos.map(e=>e.rewardPendings):[]}},G=e=>({memcmp:{bytes:e.toBase58(),offset:8}}),H=e=>({memcmp:{bytes:e.toBase58(),offset:8}});function $(e,t,n){if(e.isZero())return{amount:new a.BN(0),transferFee:new a.BN(0)};let o=(0,p.Gn)(t);if(null===o)return{amount:e,transferFee:new a.BN(0)};let i=(0,p.iY)(o,BigInt(n)),r=i.transferFeeBasisPoints==p.xf?new a.BN(i.maximumFee.toString()):function(e,t){let n=function(e,t){if(t.isZero())return new a.BN(0);if(0===e.transferFeeBasisPoints)return t;let n=new a.BN(e.maximumFee.toString());if(e.transferFeeBasisPoints===p.xf)return t.add(n);let o=new a.BN(p.xf),i=t.mul(o),r=o.sub(new a.BN(e.transferFeeBasisPoints)),s=i.add(r).sub(new a.BN(1)).div(r);return s.sub(t).gte(n)?t.add(n):s}(e,t);return new a.BN((0,p.vZ)(e,BigInt(n.toString())).toString())}(i,e);return{amount:e.add(r),transferFee:r}}function J(e,t,n){let o=(0,p.Gn)(t);if(null===o)return{amount:e,transferFee:new a.BN(0)};let i=BigInt(e.toString()),r=(0,p.vZ)((0,p.iY)(o,BigInt(n)),i);return{amount:new a.BN((i-r).toString()),transferFee:new a.BN(r.toString())}}var Y=class{constructor(e){this._program=new a.BP(k,{connection:e}),this.poolAuthority=r.PublicKey.findProgramAddressSync([_.from("pool_authority")],A)[0]}prepareTokenAccounts(e){return f(this,null,function*(){let{payer:t,tokenAOwner:n,tokenBOwner:a,tokenAMint:o,tokenBMint:i,tokenAProgram:r,tokenBProgram:s}=e,u=[],[{ataPubkey:d,ix:m},{ataPubkey:c,ix:l}]=yield Promise.all([S(this._program.provider.connection,o,n,t,!0,r),S(this._program.provider.connection,i,a,t,!0,s)]);return m&&u.push(m),l&&u.push(l),{tokenAAta:d,tokenBAta:c,instructions:u}})}getTokenBadgeAccounts(e,t){return[{pubkey:F(e),isWritable:!1,isSigner:!1},{pubkey:F(t),isWritable:!1,isSigner:!1}]}buildAddLiquidityInstruction(e){return f(this,null,function*(){let{pool:t,position:n,positionNftAccount:a,owner:o,tokenAAccount:i,tokenBAccount:r,tokenAMint:s,tokenBMint:u,tokenAVault:d,tokenBVault:m,tokenAProgram:c,tokenBProgram:l,liquidityDelta:p,tokenAAmountThreshold:y,tokenBAmountThreshold:_}=e;return yield this._program.methods.addLiquidity({liquidityDelta:p,tokenAAmountThreshold:y,tokenBAmountThreshold:_}).accountsPartial({pool:t,position:n,positionNftAccount:a,owner:o,tokenAAccount:i,tokenBAccount:r,tokenAMint:s,tokenBMint:u,tokenAVault:d,tokenBVault:m,tokenAProgram:c,tokenBProgram:l}).instruction()})}buildRemoveAllLiquidityInstruction(e){return f(this,null,function*(){let{poolAuthority:t,owner:n,pool:a,position:o,positionNftAccount:i,tokenAAccount:r,tokenBAccount:s,tokenAAmountThreshold:u,tokenBAmountThreshold:d,tokenAMint:m,tokenBMint:c,tokenAVault:l,tokenBVault:p,tokenAProgram:y,tokenBProgram:_}=e;return yield this._program.methods.removeAllLiquidity(u,d).accountsPartial({poolAuthority:t,pool:a,position:o,positionNftAccount:i,owner:n,tokenAAccount:r,tokenBAccount:s,tokenAMint:m,tokenBMint:c,tokenAVault:l,tokenBVault:p,tokenAProgram:y,tokenBProgram:_}).instruction()})}buildClaimPositionFeeInstruction(e){return f(this,null,function*(){let{owner:t,poolAuthority:n,pool:a,position:o,positionNftAccount:i,tokenAAccount:r,tokenBAccount:s,tokenAVault:u,tokenBVault:d,tokenAMint:m,tokenBMint:c,tokenAProgram:l,tokenBProgram:p}=e;return yield this._program.methods.claimPositionFee().accountsPartial({poolAuthority:n,owner:t,pool:a,position:o,positionNftAccount:i,tokenAAccount:r,tokenBAccount:s,tokenAVault:u,tokenBVault:d,tokenAMint:m,tokenBMint:c,tokenAProgram:l,tokenBProgram:p}).instruction()})}buildClosePositionInstruction(e){return f(this,null,function*(){let{owner:t,poolAuthority:n,pool:a,position:i,positionNftAccount:r,positionNftMint:s}=e;return yield this._program.methods.closePosition().accountsPartial({positionNftMint:s,positionNftAccount:r,pool:a,position:i,poolAuthority:n,rentReceiver:t,owner:t,tokenProgram:o.sy}).instruction()})}buildRefreshVestingInstruction(e){return f(this,null,function*(){let{owner:t,position:n,positionNftAccount:a,pool:o,vestingAccounts:i}=e;return 0==i.length?null:yield this._program.methods.refreshVesting().accountsPartial({position:n,positionNftAccount:a,pool:o,owner:t}).remainingAccounts(i.map(e=>({isSigner:!1,isWritable:!0,pubkey:e}))).instruction()})}buildLiquidatePositionInstruction(e){return f(this,null,function*(){let{owner:t,position:n,positionNftAccount:a,positionState:o,poolState:i,tokenAAccount:r,tokenBAccount:s,tokenAAmountThreshold:u,tokenBAmountThreshold:d}=e,{nftMint:m,pool:c}=o,{tokenAMint:l,tokenBMint:p,tokenAVault:y,tokenBVault:_}=i,f=E(i.tokenAFlag),k=E(i.tokenBFlag),h=[],g=yield this.buildClaimPositionFeeInstruction({owner:t,poolAuthority:this.poolAuthority,pool:c,position:n,positionNftAccount:a,tokenAAccount:r,tokenBAccount:s,tokenAVault:y,tokenBVault:_,tokenAMint:l,tokenBMint:p,tokenAProgram:f,tokenBProgram:k});h.push(g);let b=yield this.buildRemoveAllLiquidityInstruction({poolAuthority:this.poolAuthority,owner:t,pool:c,position:n,positionNftAccount:a,tokenAAccount:r,tokenBAccount:s,tokenAAmountThreshold:u,tokenBAmountThreshold:d,tokenAMint:l,tokenBMint:p,tokenAVault:y,tokenBVault:_,tokenAProgram:f,tokenBProgram:k});return h.push(b),h.push((yield this.buildClosePositionInstruction({owner:t,poolAuthority:this.poolAuthority,pool:c,position:n,positionNftMint:m,positionNftAccount:a}))),h})}buildCreatePositionInstruction(e){return f(this,null,function*(){let{owner:t,payer:n,pool:a,positionNft:i}=e,s=I(i),u=N(i);return{ix:yield this._program.methods.createPosition().accountsPartial({owner:t,positionNftMint:i,poolAuthority:this.poolAuthority,positionNftAccount:u,payer:n,pool:a,position:s,tokenProgram:o.sy,systemProgram:r.SystemProgram.programId}).instruction(),position:s,positionNftAccount:u}})}prepareCreatePoolParams(e){return f(this,null,function*(){let{pool:t,tokenAMint:n,tokenBMint:a,tokenAAmount:i,tokenBAmount:r,payer:s,positionNft:u,tokenAProgram:d,tokenBProgram:m}=e,c=I(u),l=N(u),p=C(n,t),y=C(a,t),{tokenAAta:_,tokenBAta:f,instructions:k}=yield this.prepareTokenAccounts({payer:s,tokenAOwner:s,tokenBOwner:s,tokenAMint:n,tokenBMint:a,tokenAProgram:d,tokenBProgram:m});if(n.equals(o.FX)){let e=x(s,_,BigInt(i.toString()));k.push(...e)}if(a.equals(o.FX)){let e=x(s,f,BigInt(r.toString()));k.push(...e)}return{position:c,positionNftAccount:l,tokenAVault:p,tokenBVault:y,payerTokenA:_,payerTokenB:f,preInstructions:k,tokenBadgeAccounts:this.getTokenBadgeAccounts(n,a)}})}setupFeeClaimAccounts(e){return f(this,null,function*(){let{payer:t,owner:n,tokenAMint:a,tokenBMint:i,tokenAProgram:r,tokenBProgram:s,receiver:u,tempWSolAccount:d}=e,m=a.equals(o.FX),c=i.equals(o.FX),l=[],p=[],y=n,_=n;u&&(y=m?d:u,_=c?d:u);let{tokenAAta:f,tokenBAta:k,instructions:h}=yield this.prepareTokenAccounts({payer:t,tokenAOwner:y,tokenBOwner:_,tokenAMint:a,tokenBMint:i,tokenAProgram:r,tokenBProgram:s});if(l.push(...h),m||c){let e=yield L(null!=d?d:n,null!=u?u:n);e&&p.push(e)}return{tokenAAccount:f,tokenBAccount:k,preInstructions:l,postInstructions:p}})}fetchConfigState(e){return f(this,null,function*(){let t=yield this._program.account.config.fetchNullable(e);return i(t,`Config account: ${e} not found`),t})}fetchPoolState(e){return f(this,null,function*(){let t=yield this._program.account.pool.fetchNullable(e);return i(t,`Pool account: ${e} not found`),t})}fetchPositionState(e){return f(this,null,function*(){let t=yield this._program.account.position.fetchNullable(e);return i(t,`Position account: ${e} not found`),t})}getAllConfigs(){return f(this,null,function*(){return yield this._program.account.config.all()})}getAllPools(){return f(this,null,function*(){return yield this._program.account.pool.all()})}getAllPositions(){return f(this,null,function*(){return yield this._program.account.position.all()})}getAllPositionsByPool(e){return f(this,null,function*(){return yield this._program.account.position.all([G(e)])})}getUserPositionByPool(e,t){return f(this,null,function*(){return(yield this.getPositionsByUser(t)).filter(t=>t.positionState.pool.equals(e))})}getPositionsByUser(e){return f(this,null,function*(){let t=yield function(e,t){return f(this,null,function*(){let n=yield e.getTokenAccountsByOwner(t,{programId:o.sy}),a=[];for(let{account:e,pubkey:t}of n.value){let n=u.O9.decode(e.data);"1"===n.amount.toString()&&a.push({positionNft:n.mint,positionNftAccount:t})}return a})}(this._program.provider.connection,e);if(0===t.length)return[];let n=t.map(e=>I(e.positionNft)),a=yield this._program.account.position.fetchMultiple(n),i=t.map((e,t)=>{let o=a[t];return o?{positionNftAccount:e.positionNftAccount,position:n[t],positionState:o}:null}).filter(Boolean);return i.sort((e,t)=>{let n=e.positionState.vestedLiquidity.add(e.positionState.permanentLockedLiquidity).add(e.positionState.unlockedLiquidity);return t.positionState.vestedLiquidity.add(t.positionState.permanentLockedLiquidity).add(t.positionState.unlockedLiquidity).cmp(n)}),i})}getAllVestingsByPosition(e){return f(this,null,function*(){return yield this._program.account.vesting.all([H(e)])})}isLockedPosition(e){return e.vestedLiquidity.add(e.permanentLockedLiquidity).gtn(0)}isPermanentLockedPosition(e){return e.permanentLockedLiquidity.gtn(0)}canUnlockPosition(e,t,n){if(t.length>0){if(this.isPermanentLockedPosition(e))return{canUnlock:!1,reason:"Position is permanently locked"};for(let e of t)if(!function(e,t){let n=e.cliffPoint,a=e.periodFrequency,o=e.numberOfPeriod,i=n.add(a.muln(o));return t.gte(i)}(e.vestingState,n))return{canUnlock:!1,reason:"Position has incomplete vesting schedule"}}return{canUnlock:!0}}isPoolExist(e){return f(this,null,function*(){return null!==(yield this._program.account.pool.fetchNullable(e))})}getLiquidityDelta(e){let{maxAmountTokenA:t,maxAmountTokenB:n,sqrtMaxPrice:a,sqrtMinPrice:o,sqrtPrice:i}=e,r=M(t,i,a),s=X(n,o,i);return(0,y.min)(r,s)}getQuote(e){let t,{inAmount:n,inputTokenMint:o,slippage:i,poolState:r,currentTime:s,currentSlot:u,inputTokenInfo:d,outputTokenInfo:m}=e,{sqrtPrice:c,liquidity:l,activationType:p,activationPoint:y,collectFeeMode:_,poolFees:f}=r,{feeSchedulerMode:k,cliffFeeNumerator:h,numberOfPeriod:g,reductionFactor:b,periodFrequency:w}=f.baseFee,v=f.dynamicFee,P=n;d&&(P=J(n,d.mint,d.currentEpoch).amount);let A=r.tokenAMint.equals(o);if(v.initialized){let{volatilityAccumulator:e,binStep:n,variableFeeControl:a}=v;t={volatilityAccumulator:e,binStep:n,variableFeeControl:a}}let{amountOut:B,totalFee:q,nextSqrtPrice:T}=function(e,t,n,o,i,r){var s;let u={feeOnInput:(s=!i)&&1===r,feesOnTokenA:s&&0===r},d=e,m=new a.BN(0);u.feeOnInput&&(m=U(e,o),d=e.sub(m));let c=function(e,t,n,o){let i;if(o){let o=e.mul(t),r=n.add(o);i=n.mul(t).add(r.sub(new a.BN(1))).div(r)}else{let a=e.shln(128).div(n);i=t.add(a)}return i}(d,t,n,i),l=i?D(n,t,c,1):Z(n,t,c,1);return{amountOut:u.feeOnInput?l:(m=U(l,o),l.sub(m)),totalFee:m,nextSqrtPrice:c}}(P,c,l,function(e,t,n,o,i,r,s,u){if(0==Number(o)||new a.BN(e).lt(t))return r;let d=function(e,t,n,o){let i;if(0==e)i=t.sub(n.mul(o));else{let e=o.shln(64).div(new a.BN(1e4)),r=function(e,t){let n=t.isNeg();if(t.isZero())return z;if((t=n?t.abs():t).gt(R))return new a.BN(0);let o=e,i=z;return(o.gte(i)&&(o=O.div(o),n=!n),t.and(new a.BN(1)).isZero()||(i=i.mul(o).shrn(64)),o=o.mul(o).shrn(64),t.and(new a.BN(2)).isZero()||(i=i.mul(o).shrn(64)),o=o.mul(o).shrn(64),t.and(new a.BN(4)).isZero()||(i=i.mul(o).shrn(64)),o=o.mul(o).shrn(64),t.and(new a.BN(8)).isZero()||(i=i.mul(o).shrn(64)),o=o.mul(o).shrn(64),t.and(new a.BN(16)).isZero()||(i=i.mul(o).shrn(64)),o=o.mul(o).shrn(64),t.and(new a.BN(32)).isZero()||(i=i.mul(o).shrn(64)),o=o.mul(o).shrn(64),t.and(new a.BN(64)).isZero()||(i=i.mul(o).shrn(64)),o=o.mul(o).shrn(64),t.and(new a.BN(128)).isZero()||(i=i.mul(o).shrn(64)),o=o.mul(o).shrn(64),t.and(new a.BN(256)).isZero()||(i=i.mul(o).shrn(64)),o=o.mul(o).shrn(64),t.and(new a.BN(512)).isZero()||(i=i.mul(o).shrn(64)),o=o.mul(o).shrn(64),t.and(new a.BN(1024)).isZero()||(i=i.mul(o).shrn(64)),o=o.mul(o).shrn(64),t.and(new a.BN(2048)).isZero()||(i=i.mul(o).shrn(64)),o=o.mul(o).shrn(64),t.and(new a.BN(4096)).isZero()||(i=i.mul(o).shrn(64)),o=o.mul(o).shrn(64),t.and(new a.BN(8192)).isZero()||(i=i.mul(o).shrn(64)),o=o.mul(o).shrn(64),t.and(new a.BN(16384)).isZero()||(i=i.mul(o).shrn(64)),o=o.mul(o).shrn(64),t.and(new a.BN(32768)).isZero()||(i=i.mul(o).shrn(64)),o=o.mul(o).shrn(64),t.and(new a.BN(65536)).isZero()||(i=i.mul(o).shrn(64)),o=o.mul(o).shrn(64),t.and(new a.BN(131072)).isZero()||(i=i.mul(o).shrn(64)),o=o.mul(o).shrn(64),t.and(new a.BN(262144)).isZero()||(i=i.mul(o).shrn(64)),i.isZero())?new a.BN(0):(n&&(i=O.div(i)),i)}(z.sub(e),n);i=t.mul(r).shrn(64)}return i}(i,r,a.BN.min(new a.BN(n),new a.BN(e).sub(t).div(o)),s);if(u){let{volatilityAccumulator:e,binStep:t,variableFeeControl:n}=u,o=function(e,t,n){if(n.isZero())return new a.BN(0);let o=e.mul(new a.BN(t)).pow(new a.BN(2));return n.mul(o).add(new a.BN(0x174876e7ff)).div(new a.BN(1e11))}(e,new a.BN(t),new a.BN(n));d=d.add(o)}return d.gt(new a.BN(5e8))?new a.BN(5e8):d}(p?s:u,y,g,w,k,h,b,t),A,_),I=B;m&&(I=J(B,m.mint,m.currentEpoch).amount);let C=W(I,i);return{swapInAmount:n,consumedInAmount:P,swapOutAmount:I,minSwapOutAmount:C,totalFee:q,priceImpact:Q(T,c)}}getDepositQuote(e){let{inAmount:t,isTokenA:n,inputTokenInfo:o,outputTokenInfo:i,minSqrtPrice:r,maxSqrtPrice:s,sqrtPrice:u}=e,d=o?J(t,o.mint,o.currentEpoch).amount:t,{liquidityDelta:m,rawAmount:c}=n?{liquidityDelta:M(d,u,s),rawAmount:e=>D(e,u,r,0)}:{liquidityDelta:X(d,r,u),rawAmount:e=>Z(e,u,s,0)},l=new a.BN(c(m));return{actualInputAmount:d,consumedInputAmount:t,liquidityDelta:m,outputAmount:i?$(l,i.mint,i.currentEpoch).amount:l}}getWithdrawQuote(e){let{liquidityDelta:t,sqrtPrice:n,maxSqrtPrice:a,minSqrtPrice:o,tokenATokenInfo:i,tokenBTokenInfo:r}=e,s=Z(t,n,a,1),u=D(t,n,o,1);return{liquidityDelta:t,outAmountA:i?J(s,i.mint,i.currentEpoch).amount:s,outAmountB:r?J(u,r.mint,r.currentEpoch).amount:u}}preparePoolCreationSingleSide(e){let{tokenAAmount:t,initSqrtPrice:n,minSqrtPrice:a,maxSqrtPrice:o,tokenAInfo:i}=e;if(!n.eq(a))throw Error("Only support single side for base token.");return M(i?t.sub($(t,i.mint,i.currentEpoch).transferFee):t,n,o)}preparePoolCreationParams(e){let{tokenAAmount:t,tokenBAmount:n,minSqrtPrice:o,maxSqrtPrice:i,tokenAInfo:r,tokenBInfo:s}=e;if(t.eq(new a.BN(0))&&n.eq(new a.BN(0)))throw Error("Invalid input amount");let u=r?t.sub($(t,r.mint,r.currentEpoch).transferFee):t,d=s?n.sub($(n,s.mint,s.currentEpoch).transferFee):n,m=function(e,t,n,o){if(e.isZero()||t.isZero())throw Error("Amount cannot be zero");let i=new l.A(e.toString()),r=new l.A(t.toString()),s=new l.A(n.toString()).div(l.A.pow(2,64)),u=new l.A(o.toString()).div(l.A.pow(2,64)),d=new l.A(1).div(u),m=r.div(i),c=d.mul(m),p=s.sub(c),y=c.sub(s),_=new l.A(4).mul(m),f=y.mul(y).add(_).sqrt(),k=p.add(f).div(new l.A(2)).mul(l.A.pow(2,64));return new a.BN(k.floor().toFixed())}(t,n,o,i),c=M(u,m,i),p=X(d,o,m);return{initSqrtPrice:m,liquidityDelta:(0,y.min)(c,p)}}createPool(e){return f(this,null,function*(){let{payer:t,creator:n,config:a,positionNft:i,tokenAMint:s,tokenBMint:u,initSqrtPrice:d,liquidityDelta:m,activationPoint:c,tokenAAmount:l,tokenBAmount:p,tokenAProgram:y,tokenBProgram:_,isLockLiquidity:f}=e,k=T(a,s,u),{position:h,positionNftAccount:g,tokenAVault:b,tokenBVault:w,payerTokenA:v,payerTokenB:P,preInstructions:A,tokenBadgeAccounts:B}=yield this.prepareCreatePoolParams({pool:k,tokenAMint:s,tokenBMint:u,tokenAAmount:l,tokenBAmount:p,payer:t,positionNft:i,tokenAProgram:y,tokenBProgram:_}),q=[];if(f){let e=yield this._program.methods.permanentLockPosition(m).accountsPartial({position:h,positionNftAccount:g,pool:k,owner:n}).instruction();q.push(e)}return yield this._program.methods.initializePool({liquidity:m,sqrtPrice:d,activationPoint:c}).accountsPartial({creator:n,positionNftAccount:g,positionNftMint:i,payer:t,config:a,poolAuthority:this.poolAuthority,pool:k,position:h,tokenAMint:s,tokenBMint:u,tokenAVault:b,tokenBVault:w,payerTokenA:v,payerTokenB:P,token2022Program:o.sy,tokenAProgram:y,tokenBProgram:_,systemProgram:r.SystemProgram.programId}).preInstructions(A).postInstructions(q).remainingAccounts(B).transaction()})}createCustomPool(e){return f(this,null,function*(){let{tokenAMint:t,tokenBMint:n,tokenAAmount:i,tokenBAmount:s,sqrtMinPrice:u,sqrtMaxPrice:d,liquidityDelta:m,initSqrtPrice:c,payer:l,creator:p,positionNft:f,poolFees:k,hasAlphaVault:h,collectFeeMode:g,activationPoint:b,activationType:w,tokenAProgram:v,tokenBProgram:P,isLockLiquidity:T}=e,I=r.PublicKey.findProgramAddressSync([_.from("cpool"),B(t,n),q(t,n)],A)[0],{position:C,positionNftAccount:F,tokenAVault:N,tokenBVault:E,payerTokenA:S,payerTokenB:x,preInstructions:L,tokenBadgeAccounts:R}=yield this.prepareCreatePoolParams({pool:I,tokenAMint:t,tokenBMint:n,tokenAAmount:i,tokenBAmount:n.equals(o.FX)?(0,y.max)(s,new a.BN(1)):s,payer:l,positionNft:f,tokenAProgram:v,tokenBProgram:P}),z=[];if(T){let e=yield this._program.methods.permanentLockPosition(m).accountsPartial({position:C,positionNftAccount:F,pool:I,owner:p}).instruction();z.push(e)}return{tx:yield this._program.methods.initializeCustomizablePool({poolFees:k,sqrtMinPrice:u,sqrtMaxPrice:d,hasAlphaVault:h,liquidity:m,sqrtPrice:c,activationType:w,collectFeeMode:g,activationPoint:b}).accountsPartial({creator:p,positionNftAccount:F,positionNftMint:f,payer:l,poolAuthority:this.poolAuthority,pool:I,position:C,tokenAMint:t,tokenBMint:n,tokenAVault:N,tokenBVault:E,payerTokenA:S,payerTokenB:x,token2022Program:o.sy,tokenAProgram:v,tokenBProgram:P,systemProgram:r.SystemProgram.programId}).preInstructions(L).postInstructions(z).remainingAccounts(R).transaction(),pool:I,position:C}})}createCustomPoolWithDynamicConfig(e){return f(this,null,function*(){let{tokenAMint:t,tokenBMint:n,tokenAAmount:a,tokenBAmount:i,sqrtMinPrice:s,sqrtMaxPrice:u,liquidityDelta:d,initSqrtPrice:m,payer:c,config:l,poolCreatorAuthority:p,creator:y,positionNft:_,poolFees:f,hasAlphaVault:k,collectFeeMode:h,activationPoint:g,activationType:b,tokenAProgram:w,tokenBProgram:v,isLockLiquidity:P}=e,A=T(l,t,n),{position:B,positionNftAccount:q,tokenAVault:I,tokenBVault:C,payerTokenA:F,payerTokenB:N,preInstructions:E,tokenBadgeAccounts:S}=yield this.prepareCreatePoolParams({pool:A,tokenAMint:t,tokenBMint:n,tokenAAmount:a,tokenBAmount:i,payer:c,positionNft:_,tokenAProgram:w,tokenBProgram:v}),x=[];if(P){let e=yield this._program.methods.permanentLockPosition(d).accountsPartial({position:B,positionNftAccount:q,pool:A,owner:y}).instruction();x.push(e)}return{tx:yield this._program.methods.initializePoolWithDynamicConfig({poolFees:f,sqrtMinPrice:s,sqrtMaxPrice:u,hasAlphaVault:k,liquidity:d,sqrtPrice:m,activationType:b,collectFeeMode:h,activationPoint:g}).accountsPartial({creator:y,positionNftAccount:q,positionNftMint:_,payer:c,poolAuthority:this.poolAuthority,pool:A,position:B,poolCreatorAuthority:p,config:l,tokenAMint:t,tokenBMint:n,tokenAVault:I,tokenBVault:C,payerTokenA:F,payerTokenB:N,token2022Program:o.sy,tokenAProgram:w,tokenBProgram:v,systemProgram:r.SystemProgram.programId}).preInstructions(E).postInstructions(x).remainingAccounts(S).transaction(),pool:A,position:B}})}createPosition(e){return f(this,null,function*(){let{ix:t}=yield this.buildCreatePositionInstruction(e);return new r.Transaction().add(t)})}addLiquidity(e){return f(this,null,function*(){let{owner:t,pool:n,position:a,positionNftAccount:i,liquidityDelta:s,maxAmountTokenA:u,maxAmountTokenB:d,tokenAAmountThreshold:m,tokenBAmountThreshold:c,tokenAMint:l,tokenBMint:p,tokenAVault:y,tokenBVault:_,tokenAProgram:f,tokenBProgram:k}=e,{tokenAAta:h,tokenBAta:g,instructions:b}=yield this.prepareTokenAccounts({payer:t,tokenAOwner:t,tokenBOwner:t,tokenAMint:l,tokenBMint:p,tokenAProgram:f,tokenBProgram:k});if(l.equals(o.FX)){let e=x(t,h,BigInt(u.toString()));b.push(...e)}if(p.equals(o.FX)){let e=x(t,g,BigInt(d.toString()));b.push(...e)}let w=[];if([l.toBase58(),p.toBase58()].includes(o.FX.toBase58())){let e=yield L(t);e&&w.push(e)}let v=yield this.buildAddLiquidityInstruction({pool:n,position:a,positionNftAccount:i,owner:t,tokenAAccount:h,tokenBAccount:g,tokenAMint:l,tokenBMint:p,tokenAVault:y,tokenBVault:_,tokenAProgram:f,tokenBProgram:k,liquidityDelta:s,tokenAAmountThreshold:m,tokenBAmountThreshold:c}),P=new r.Transaction;return P.add(...b.length>0?b:[],v,...w.length>0?w:[]),P})}createPositionAndAddLiquidity(e){return f(this,null,function*(){let{owner:t,pool:n,positionNft:a,liquidityDelta:i,maxAmountTokenA:s,maxAmountTokenB:u,tokenAAmountThreshold:d,tokenBAmountThreshold:m,tokenAMint:c,tokenBMint:l,tokenAProgram:p,tokenBProgram:y}=e,{tokenAAta:_,tokenBAta:f,instructions:k}=yield this.prepareTokenAccounts({payer:t,tokenAOwner:t,tokenBOwner:t,tokenAMint:c,tokenBMint:l,tokenAProgram:p,tokenBProgram:y}),h=C(c,n),g=C(l,n);if(c.equals(o.FX)){let e=x(t,_,BigInt(s.toString()));k.push(...e)}if(l.equals(o.FX)){let e=x(t,f,BigInt(u.toString()));k.push(...e)}let b=[];if([c.toBase58(),l.toBase58()].includes(o.FX.toBase58())){let e=yield L(t);e&&b.push(e)}let{ix:w,position:v,positionNftAccount:P}=yield this.buildCreatePositionInstruction({owner:t,payer:t,pool:n,positionNft:a}),A=yield this.buildAddLiquidityInstruction({pool:n,position:v,positionNftAccount:P,owner:t,tokenAAccount:_,tokenBAccount:f,tokenAMint:c,tokenBMint:l,tokenAVault:h,tokenBVault:g,tokenAProgram:p,tokenBProgram:y,liquidityDelta:i,tokenAAmountThreshold:d,tokenBAmountThreshold:m}),B=new r.Transaction;return B.add(w),B.add(...k.length>0?k:[],A,...b.length>0?b:[]),B})}removeLiquidity(e){return f(this,null,function*(){let{owner:t,pool:n,position:a,positionNftAccount:i,liquidityDelta:r,tokenAAmountThreshold:s,tokenBAmountThreshold:u,tokenAMint:d,tokenBMint:m,tokenAVault:c,tokenBVault:l,tokenAProgram:p,tokenBProgram:y,vestings:_}=e,{tokenAAta:f,tokenBAta:k,instructions:h}=yield this.prepareTokenAccounts({payer:t,tokenAOwner:t,tokenBOwner:t,tokenAMint:d,tokenBMint:m,tokenAProgram:p,tokenBProgram:y}),g=[];if([d.toBase58(),m.toBase58()].includes(o.FX.toBase58())){let e=yield L(t);e&&g.push(e)}if(_.length>0){let e=yield this.buildRefreshVestingInstruction({owner:t,position:a,positionNftAccount:i,pool:n,vestingAccounts:_.map(e=>e.account)});e&&h.push(e)}return yield this._program.methods.removeLiquidity({liquidityDelta:r,tokenAAmountThreshold:s,tokenBAmountThreshold:u}).accountsPartial({poolAuthority:this.poolAuthority,pool:n,position:a,positionNftAccount:i,owner:t,tokenAAccount:f,tokenBAccount:k,tokenAMint:d,tokenBMint:m,tokenAVault:c,tokenBVault:l,tokenAProgram:p,tokenBProgram:y}).preInstructions(h).postInstructions(g).transaction()})}removeAllLiquidity(e){return f(this,null,function*(){let{owner:t,pool:n,position:a,positionNftAccount:i,tokenAAmountThreshold:s,tokenBAmountThreshold:u,tokenAMint:d,tokenBMint:m,tokenAVault:c,tokenBVault:l,tokenAProgram:p,tokenBProgram:y,vestings:_}=e,{tokenAAta:f,tokenBAta:k,instructions:h}=yield this.prepareTokenAccounts({payer:t,tokenAOwner:t,tokenBOwner:t,tokenAMint:d,tokenBMint:m,tokenAProgram:p,tokenBProgram:y}),g=[];if([d.toBase58(),m.toBase58()].includes(o.FX.toBase58())){let e=yield L(t);e&&g.push(e)}if(_.length>0){let e=yield this.buildRefreshVestingInstruction({owner:t,position:a,positionNftAccount:i,pool:n,vestingAccounts:_.map(e=>e.account)});e&&h.push(e)}let b=yield this.buildRemoveAllLiquidityInstruction({poolAuthority:this.poolAuthority,owner:t,pool:n,position:a,positionNftAccount:i,tokenAAccount:f,tokenBAccount:k,tokenAAmountThreshold:s,tokenBAmountThreshold:u,tokenAMint:d,tokenBMint:m,tokenAVault:c,tokenBVault:l,tokenAProgram:p,tokenBProgram:y}),w=new r.Transaction;return w.add(...h.length>0?h:[],b,...g.length>0?g:[]),w})}swap(e){return f(this,null,function*(){let{payer:t,pool:n,inputTokenMint:a,outputTokenMint:i,amountIn:r,minimumAmountOut:s,tokenAVault:u,tokenBVault:d,tokenAMint:m,tokenBMint:c,tokenAProgram:l,tokenBProgram:p,referralTokenAccount:y}=e,[_,f]=a.equals(m)?[l,p]:[p,l],{tokenAAta:k,tokenBAta:h,instructions:g}=yield this.prepareTokenAccounts({payer:t,tokenAOwner:t,tokenBOwner:t,tokenAMint:a,tokenBMint:i,tokenAProgram:_,tokenBProgram:f});if(a.equals(o.FX)){let e=x(t,k,BigInt(r.toString()));g.push(...e)}let b=[];if([m.toBase58(),c.toBase58()].includes(o.FX.toBase58())){let e=yield L(t);e&&b.push(e)}return yield this._program.methods.swap({amountIn:r,minimumAmountOut:s}).accountsPartial({poolAuthority:this.poolAuthority,pool:n,payer:t,inputTokenAccount:k,outputTokenAccount:h,tokenAVault:u,tokenBVault:d,tokenAMint:m,tokenBMint:c,tokenAProgram:l,tokenBProgram:p,referralTokenAccount:y}).preInstructions(g).postInstructions(b).transaction()})}lockPosition(e){return f(this,null,function*(){let{owner:t,pool:n,payer:a,vestingAccount:o,position:i,positionNftAccount:s,cliffPoint:u,periodFrequency:d,cliffUnlockLiquidity:m,liquidityPerPeriod:c,numberOfPeriod:l}=e;return yield this._program.methods.lockPosition({cliffPoint:u,periodFrequency:d,cliffUnlockLiquidity:m,liquidityPerPeriod:c,numberOfPeriod:l}).accountsPartial({position:i,positionNftAccount:s,vesting:o,pool:n,owner:t,payer:a,systemProgram:r.SystemProgram.programId}).transaction()})}permanentLockPosition(e){return f(this,null,function*(){let{owner:t,position:n,positionNftAccount:a,pool:o,unlockedLiquidity:i}=e;return yield this._program.methods.permanentLockPosition(i).accountsPartial({position:n,positionNftAccount:a,pool:o,owner:t}).transaction()})}refreshVesting(e){return f(this,null,function*(){let t=yield this.buildRefreshVestingInstruction(e);return new r.Transaction().add(t)})}closePosition(e){return f(this,null,function*(){let{owner:t,pool:n,position:a,positionNftMint:o,positionNftAccount:i}=e,s=yield this.buildClosePositionInstruction({owner:t,poolAuthority:this.poolAuthority,pool:n,position:a,positionNftMint:o,positionNftAccount:i});return new r.Transaction().add(s)})}removeAllLiquidityAndClosePosition(e){return f(this,null,function*(){let{owner:t,position:n,positionNftAccount:a,positionState:i,poolState:s,tokenAAmountThreshold:u,tokenBAmountThreshold:d,vestings:m,currentPoint:c}=e,{pool:l}=i,{tokenAMint:p,tokenBMint:y}=s,{canUnlock:_,reason:f}=this.canUnlockPosition(i,m,c);if(!_)throw Error(`Cannot remove liquidity: ${f}`);let k=E(s.tokenAFlag),h=E(s.tokenBFlag),{tokenAAta:g,tokenBAta:b,instructions:w}=yield this.prepareTokenAccounts({payer:t,tokenAOwner:t,tokenBOwner:t,tokenAMint:p,tokenBMint:y,tokenAProgram:k,tokenBProgram:h}),v=[];if([p.toBase58(),y.toBase58()].includes(o.FX.toBase58())){let e=yield L(t);e&&v.push(e)}if(m.length>0){let e=yield this.buildRefreshVestingInstruction({owner:t,position:n,positionNftAccount:a,pool:l,vestingAccounts:m.map(e=>e.account)});e&&w.push(e)}let P=new r.Transaction;w.length>0&&P.add(...w);let A=yield this.buildLiquidatePositionInstruction({owner:t,position:n,positionNftAccount:a,positionState:i,poolState:s,tokenAAccount:g,tokenBAccount:b,tokenAAmountThreshold:u,tokenBAmountThreshold:d});return P.add(...A),v.length>0&&P.add(...v),P})}mergePosition(e){return f(this,null,function*(){let{owner:t,positionA:n,positionB:i,positionBState:s,poolState:u,positionBNftAccount:d,positionANftAccount:m,tokenAAmountAddLiquidityThreshold:c,tokenBAmountAddLiquidityThreshold:l,tokenAAmountRemoveLiquidityThreshold:p,tokenBAmountRemoveLiquidityThreshold:_,positionBVestings:f,currentPoint:k}=e,{canUnlock:h,reason:g}=this.canUnlockPosition(s,f,k);if(!h)throw Error(`Cannot remove liquidity: ${g}`);let b=s.pool,{tokenAMint:w,tokenBMint:v,tokenAVault:P,tokenBVault:A}=u,B=E(u.tokenAFlag),q=E(u.tokenBFlag),{tokenAAta:T,tokenBAta:I,instructions:C}=yield this.prepareTokenAccounts({payer:t,tokenAOwner:t,tokenBOwner:t,tokenAMint:w,tokenBMint:v,tokenAProgram:B,tokenBProgram:q}),F=s.unlockedLiquidity;if(f.length>0){let e=f.reduce((e,t)=>{let n=function(e,t){let{cliffPoint:n,periodFrequency:o,cliffUnlockLiquidity:i,liquidityPerPeriod:r,numberOfPeriod:s,totalReleasedLiquidity:u}=e;if(t.lt(n))return new a.BN(0);if(o.isZero())return i;let d=new a.BN(t).sub(n).div(o);return d=(0,y.min)(d,new a.BN(s)),i.add(d.mul(r)).sub(u)}(t.vestingState,k);return e.add(n)},new a.BN(0));F=F.add(e);let n=yield this.buildRefreshVestingInstruction({owner:t,position:i,positionNftAccount:d,pool:b,vestingAccounts:f.map(e=>e.account)});n&&C.push(n)}let N=Z(F,u.sqrtPrice,u.sqrtMaxPrice,1),S=D(F,u.sqrtPrice,u.sqrtMinPrice,1),x=this.getLiquidityDelta({maxAmountTokenA:N,maxAmountTokenB:S,sqrtMaxPrice:u.sqrtMaxPrice,sqrtMinPrice:u.sqrtMinPrice,sqrtPrice:u.sqrtPrice}),R=new r.Transaction;C.length>0&&R.add(...C);let z=yield this.buildLiquidatePositionInstruction({owner:t,position:i,positionNftAccount:d,positionState:s,poolState:u,tokenAAccount:T,tokenBAccount:I,tokenAAmountThreshold:p,tokenBAmountThreshold:_});R.add(...z);let O=yield this.buildAddLiquidityInstruction({pool:b,position:n,positionNftAccount:m,owner:t,tokenAAccount:T,tokenBAccount:I,tokenAMint:w,tokenBMint:v,tokenAVault:P,tokenBVault:A,tokenAProgram:B,tokenBProgram:q,liquidityDelta:x,tokenAAmountThreshold:c,tokenBAmountThreshold:l});if(R.add(O),[w.toBase58(),v.toBase58()].includes(o.FX.toBase58())){let e=yield L(t);e&&R.add(e)}return R})}updateRewardDuration(e){return f(this,null,function*(){let{pool:t,admin:n,rewardIndex:a,newDuration:o}=e;return yield this._program.methods.updateRewardDuration(a,o).accountsPartial({pool:t,admin:n}).transaction()})}updateRewardFunder(e){return f(this,null,function*(){let{pool:t,admin:n,rewardIndex:a,newFunder:o}=e;return yield this._program.methods.updateRewardFunder(a,o).accountsPartial({pool:t,admin:n}).transaction()})}fundReward(e){return f(this,null,function*(){let{rewardIndex:t,carryForward:n,pool:a,funder:i,amount:r}=e,{vault:s,mint:u}=(yield this.fetchPoolState(a)).rewardInfos[t],d=E(t),m=[],{ataPubkey:c,ix:l}=yield S(this._program.provider.connection,u,i,i,!0,d);if(l&&m.push(l),u.equals(o.FX)&&!r.isZero()){let e=x(i,c,BigInt(r.toString()));m.push(...e)}return yield this._program.methods.fundReward(t,r,n).accountsPartial({pool:a,rewardVault:s,rewardMint:u,funderTokenAccount:c,funder:i,tokenProgram:d}).transaction()})}withdrawIneligibleReward(e){return f(this,null,function*(){let{rewardIndex:t,pool:n,funder:a}=e,{mint:i,vault:r,rewardTokenFlag:s}=(yield this.fetchPoolState(n)).rewardInfos[t],u=E(s),d=[],m=[],{ataPubkey:c,ix:l}=yield S(this._program.provider.connection,i,a,a,!0,u);if(l&&d.push(l),i.equals(o.FX)){let e=yield L(a);e&&m.push(e)}return yield this._program.methods.withdrawIneligibleReward(t).accountsPartial({pool:n,rewardVault:r,rewardMint:i,poolAuthority:this.poolAuthority,funderTokenAccount:c,funder:a,tokenProgram:u}).preInstructions(d).postInstructions(m).transaction()})}claimPartnerFee(e){return f(this,null,function*(){let{feePayer:t,receiver:n,tempWSolAccount:a,partner:o,pool:i,maxAmountA:r,maxAmountB:s}=e,{tokenAVault:u,tokenBVault:d,tokenAMint:m,tokenBMint:c,tokenAFlag:l,tokenBFlag:p}=yield this.fetchPoolState(i),y=E(l),_=E(p),f=null!=t?t:o,{tokenAAccount:k,tokenBAccount:h,preInstructions:g,postInstructions:b}=yield this.setupFeeClaimAccounts({payer:f,owner:o,tokenAMint:m,tokenBMint:c,tokenAProgram:y,tokenBProgram:_,receiver:n,tempWSolAccount:a});return yield this._program.methods.claimPartnerFee(r,s).accountsPartial({poolAuthority:this.poolAuthority,pool:i,tokenAAccount:k,tokenBAccount:h,tokenAVault:u,tokenBVault:d,tokenAMint:m,tokenBMint:c,partner:o,tokenAProgram:y,tokenBProgram:_}).preInstructions(g).postInstructions(b).transaction()})}claimPositionFee(e){return f(this,null,function*(){let{receiver:t,tempWSolAccount:n,feePayer:a,owner:o,pool:i,position:s,positionNftAccount:u,tokenAVault:d,tokenBVault:m,tokenAMint:c,tokenBMint:l,tokenAProgram:p,tokenBProgram:y}=e,_=null!=a?a:o,{tokenAAccount:f,tokenBAccount:k,preInstructions:h,postInstructions:g}=yield this.setupFeeClaimAccounts({payer:_,owner:o,tokenAMint:c,tokenBMint:l,tokenAProgram:p,tokenBProgram:y,receiver:t,tempWSolAccount:n}),b=yield this.buildClaimPositionFeeInstruction({owner:o,poolAuthority:this.poolAuthority,pool:i,position:s,positionNftAccount:u,tokenAAccount:f,tokenBAccount:k,tokenAVault:d,tokenBVault:m,tokenAMint:c,tokenBMint:l,tokenAProgram:p,tokenBProgram:y}),w=new r.Transaction;return w.add(...h.length>0?h:[],b,...g.length>0?g:[]),w})}claimPositionFee2(e){return f(this,null,function*(){let{receiver:t,feePayer:n,owner:a,pool:i,position:s,positionNftAccount:u,tokenAVault:d,tokenBVault:m,tokenAMint:c,tokenBMint:l,tokenAProgram:p,tokenBProgram:y}=e,_=null!=n?n:a,f=t,k=t;c.equals(o.FX)&&(f=a),l.equals(o.FX)&&(k=a);let{tokenAAta:h,tokenBAta:g,instructions:b}=yield this.prepareTokenAccounts({payer:_,tokenAOwner:f,tokenBOwner:k,tokenAMint:c,tokenBMint:l,tokenAProgram:p,tokenBProgram:y}),w=[];if(c.equals(o.FX)||l.equals(o.FX)){let e=yield L(a,t);e&&w.push(e)}let v=yield this.buildClaimPositionFeeInstruction({owner:a,poolAuthority:this.poolAuthority,pool:i,position:s,positionNftAccount:u,tokenAAccount:h,tokenBAccount:g,tokenAVault:d,tokenBVault:m,tokenAMint:c,tokenBMint:l,tokenAProgram:p,tokenBProgram:y}),P=new r.Transaction;return P.add(...b.length>0?b:[],v,...w.length>0?w:[]),P})}claimReward(e){return f(this,null,function*(){let{feePayer:t,user:n,position:a,positionNftAccount:i,rewardIndex:r,poolState:s,positionState:u}=e,d=s.rewardInfos[r],m=E(d.rewardTokenFlag),c=[],l=[],{ataPubkey:p,ix:y}=yield S(this._program.provider.connection,d.mint,n,null!=t?t:n,!0,m);if(y&&c.push(y),d.mint.equals(o.FX)){let e=yield L(n);e&&l.push(e)}return yield this._program.methods.claimReward(r).accountsPartial({pool:u.pool,positionNftAccount:i,rewardVault:d.vault,rewardMint:d.mint,poolAuthority:this.poolAuthority,position:a,userTokenAccount:p,owner:n,tokenProgram:m}).preInstructions(c).postInstructions(l).transaction()})}}}}]);